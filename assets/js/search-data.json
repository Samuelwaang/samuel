{
  
    
        "post0": {
            "title": "Javascript test",
            "content": "Document . Name Surname Name | Surname |",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/09/24/test.html",
            "relUrl": "/markdown/2022/09/24/test.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Javascript and HTML Notebook",
            "content": "const resultContainer = document.getElementById(&quot;result&quot;); ... build data table .... for (const row of data) { // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const joke = document.createElement(&quot;td&quot;); const haha = document.createElement(&quot;td&quot;); const boohoo = document.createElement(&quot;td&quot;); // data is specific to the API joke.innerHTML = row.joke; haha.innerHTML = row.haha; boohoo.innerHTML = row.boohoo; // this build td&#39;s into tr tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // add HTML to container resultContainer.appendChild(tr); } . evalmachine.&lt;anonymous&gt;:1 const resultContainer = document.getElementById(&#34;result&#34;); ^ ReferenceError: document is not defined at evalmachine.&lt;anonymous&gt;:1:34 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/09/24/js-html.html",
            "relUrl": "/fastpages/pbl/2022/09/24/js-html.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Javascript HTML",
            "content": "First Name Middle Name Last Name Period Score Name | Period | Score | &lt;/body&gt;",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/09/24/js-html-post.html",
            "relUrl": "/markdown/2022/09/24/js-html-post.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fibonacci Notebook",
            "content": "Basic Fibonacci Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(8); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . hacks without reproducing same lines of code . While Loop . public class WhileLoop extends Fibo { public WhileLoop() { this(8); } public WhileLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { this.name = &quot;While&quot;; int num = 0; long[] w = new long[]{0, 1}; while(this.size &gt;= num) { this.setData(w[0]); w = new long[]{w[1], w[0] + w[1]}; num++; } } static public void main(String[] args) { WhileLoop whileprint = new WhileLoop(); whileprint.print(); } } WhileLoop.main(null) . Init method = While fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . Recursion . public class ForLoop extends Fibo{ public ForLoop() { this(8); } public ForLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void recur(long[] f, int i) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; i++; if (i &lt; this.size) { this.recur(f, i); } } protected void init() { this.name = &quot;Recursion&quot;; int i = 0; long[] f = new long[] {0,1}; this.recur(f, i); } static public void main(String[] args) { ForLoop rFib = new ForLoop(); rFib.print(); } } ForLoop.main(null) . Init method = Recursion fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . For Loop . public class ForLoop extends Fibo{ public ForLoop() { this(8); } public ForLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { this.name = &quot;For Loop&quot;; long[] f = new long[]{0, 1}; for(int num = 0; num &lt;= this.size; num++) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { ForLoop forprint = new ForLoop(); forprint.print(); } } ForLoop.main(null) . Init method = For Loop fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/20/fibonacci-notebook.html",
            "relUrl": "/cb/jupyter/2022/09/20/fibonacci-notebook.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "FRQ 1 Notebook",
            "content": "2016 FRQ question #1 . a. Write the entire RandomStringChooser class. Your implementation must include an appropriate constructor and any necessary methods. Any instance variables must be private. The code segment in the example above should have the indicated behavior (that is, it must compile and produce a result like the possible output shown). Neither the constructor nor any of the methods should alter the parameter passed to the constructor, but your implementation may copy the contents of the array. . public class RandomStringChooser { //makes class public RandomStringChooser(String str) { //creates class constructor for RandomStringChooser class ArrayList&lt;String&gt; stringArray = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; z = new ArrayList&lt;String&gt;(); } public static void getNext(String[] args) { //getNext method for (int l = 0; l &lt; 3; l++) { //running 3 times to show that it is random each time z.clear(); stringArray.add(&quot;chicken&quot;); //adding a couple inputs to the initial list stringArray.add(&quot;cow&quot;); stringArray.add(&quot;pig&quot;); int num = stringArray.size(); for (int i = 0; i &lt; 4; i++) { //for loop that iterates 4 times, which is one more than the amount of elements in the initial array int b = stringArray.size(); // sets b to the number of elements in the initial array int random = (int)(Math.random() * stringArray.size()); //randomizes a number if (b &gt; 0) { //if the amount of elements in the initial array is greater than 0, first add the chosen element to a new array and then delete that element from the original array z.add(stringArray.get(random)); stringArray.remove(random); } else { // if the amount of elements in the initial array is 0, then it adds none to the new array z.add(&quot;None&quot;); } } System.out.print(z + &quot; &quot;); //prints final array } } } RandomStringChooser.getNext(null); . [chicken, cow, pig, None] [chicken, pig, cow, None] [cow, chicken, pig, None] . b. Complete the RandomLetterChooser constructor below. /** Constructs a random letter chooser using the given string str. . Precondition: str contains only letters. */ public RandomLetterChooser(String str) | . public RandomLetterChooser(String str) //finish constructor and calls the superclass method getSingleLetters { super(getSingleLetters(str)); } .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/18/frq1.html",
            "relUrl": "/cb/jupyter/2022/09/18/frq1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Iteration Notebook",
            "content": "iteration . This is more of an imperative programming style, as the cars aren&#39;t objects. They don&#39;t have attributes. | to access a 2D array, you can print out the stuff by a single dimension, ie: printing out rows and columns seperately | . class Main { // The area between class definition and the 1st method is where we keep data for object in Java String [][] cars; public Main() { //Storing Data in 2D arrays cars = new String[][]{ //car 0 { &quot; ______ vroom &quot;, //[0][0] &quot; /[_][_|`.__ &quot;, &quot; ( _ _ _| &quot;, &quot; =`-(_)--(_)- &quot;, &quot;===============================&quot; }, //car 1 { &quot; -_- _/|______||__ mmmmm &quot;, &quot; -_-__ / ,-. -|- ,-.`-. &quot;, &quot; _-_- `( o )-( o )-&#39; &quot;, &quot; `-&#39; `-&#39; &quot;, &quot;===============================&quot; }, //car 2 { &quot; ____ vroom vroom &quot;, &quot; __/ |_|_ &quot;, &quot; | _ _``-. &quot;, &quot; &#39;-(_)(_)--&#39; &quot;, &quot;===========================&quot; }, //car 3 { &quot; __ car &quot;, &quot; _.-.___|__ &quot;, &quot; | _ _`-. &quot;, &quot; &#39;-(_)-(_)--` &quot;, &quot;===============================&quot; }, }; } public void printPoem() { //starts poem System.out.println(); System.out.println(&quot;Car crash poem&quot;); System.out.println(&quot;&quot;); // carCount is the number of elements in the carcount array int carCount = cars.length; for (int i = carCount; i &gt;= 1; i--) //loop through array, decreasing the amount of cars by one each time it loops { System.out.println(i + &quot; car(s) driving on the road...&quot;); int bz = cars[0].length; for (int row = 0; row &lt; bz; row++) { //cycles through &quot;cells&quot; of 2d array //prints column for (int col = 0; col &lt; carCount; col++) { System.out.print(cars[col][row] + &quot;&quot;); } System.out.println(); } // decrease car count by 1 System.out.println(&quot;One car crashed and skidded off the road.&quot;); carCount -= 1; } System.out.println(&quot;No more cars driving on the road&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new Main().printPoem(); //a new ghost list and output in one step } } Main.main(null); . Car crash poem 4 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm ____ vroom vroom __ car /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. __/ |_|_ _.-.___|__ ( _ _ _| _-_- `( o )-( o )-&#39; | _ _``-. | _ _`-. =`-(_)--(_)- `-&#39; `-&#39; &#39;-(_)(_)--&#39; &#39;-(_)-(_)--` ======================================================================================================================== One car crashed and skidded off the road. 3 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm ____ vroom vroom /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. __/ |_|_ ( _ _ _| _-_- `( o )-( o )-&#39; | _ _``-. =`-(_)--(_)- `-&#39; `-&#39; &#39;-(_)(_)--&#39; ========================================================================================= One car crashed and skidded off the road. 2 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. ( _ _ _| _-_- `( o )-( o )-&#39; =`-(_)--(_)- `-&#39; `-&#39; ============================================================== One car crashed and skidded off the road. 1 car(s) driving on the road... ______ vroom /[_][_|`.__ ( _ _ _| =`-(_)--(_)- =============================== One car crashed and skidded off the road. No more cars driving on the road THE END .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/12/AP-iteration.html",
            "relUrl": "/cb/jupyter/2022/09/12/AP-iteration.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Focus and Habits",
            "content": "Video . taking control of life is very difficult and takes a lot of things to do | do happy things that people may not be used to doing, which helps us, requires a lot of effort | to gain happiness, have to make a habit out of it, things like exercise are important | need to put things in practice, can&#39;t just think about it | the gi joe fallacy, knowing is only half the battle, just knowing isn&#39;t enough, need to actively do it | have to recognize that your mind is lying to you about what makes you happy sometimes | . Personal . I&#39;m quite interested in stuff in either the computer science field or the biomed field and have been working at both to get further in them. After watching some of this video, I&#39;ve realized that I can&#39;t just keep putting off doing stuff and that I need to actively try to get myself to do something. So, I want to try and push myself to try and do things that I may not be comfortable with and I believe that in the long run, I will look back on those moments and be happier because they happened. .",
            "url": "https://samuelwaang.github.io/samuel/jupyter/personal/2022/09/10/focus-habit.html",
            "relUrl": "/jupyter/personal/2022/09/10/focus-habit.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Boolean Notebook",
            "content": "ifs . if: If the condition in the if statement is true, then the code is executed under it is executed. | if-else: If the condition in the if statement is true, then that code under that is executed. Otherwise (if false), then the code under else is executed. | if-elseif-else: There are 2 conditions to be met in this, with the first if&#39;s code being executed if that is true. The elseif&#39;s code will be executed if the statement for that is true. If it&#39;s false for both if and ifelse statements, then the else&#39;s code will be executed. | . import java.util.Scanner; Scanner input; System.out.print(&quot;What color are apples?: &quot;); input = new Scanner(System.in); String answer = input.nextLine(); answer = answer.toLowerCase(); System.out.println(answer); if ((answer == &quot;yellow&quot;) || (answer == &quot;red&quot;) || (answer == &quot;green&quot;)){ // will print correct if the user answers yellow, red, or green System.out.print(&quot;You are correct&quot;); } else {// if the user inputs anything other than yellow, red, green, then it outputs this System.out.print(&quot;What kind of apples are have you been looking at?&quot;); } System.out.println(&quot; &quot;); System.out.print(&quot;On a scale of 1-10, how do you rate apples?: &quot;); input = new Scanner(System.in); Double answer1 = input.nextDouble(); System.out.println(answer1); if ((answer1 &lt; 5) &amp;&amp; (answer1 &gt; 0)) { // if the user inputs a number between 1 and 4, then it prints this System.out.print(&quot;What is wrong with you.&quot;); } else if ((answer1 &lt; 8) &amp;&amp; (answer1 &gt;= 5)) { //if the user inputs a number between 5 and 7 it inputs this System.out.print(&quot;That makes sense.&quot;); } else if ((answer1 &lt;= 10) &amp;&amp; (answer1 &gt;= 8)) { // if the user inputs a number between 8 and 10 it inputs this System.out.print(&quot;Very correct!&quot;); } else { // if the user doesn&#39;t input a number from 1 to 10 it inputs this System.out.print(&quot;Your choice has to be a number between 1 and 10.&quot;); } . What color are apples?: blue What kind of apples are have you been looking at? On a scale of 1-10, how do you rate apples?: 5.0 That makes sense. . Switch case . switch is used to select one of the code blocks | switch makes it little easier to understand and a little less cluttered | the value inputted will be compared with the values of each case and if it matches, then that will executed | . import java.util.Scanner; System.out.print(&quot;How old are you?: &quot;); Scanner num = new Scanner(System.in); int answer = Integer.parseInt(num.nextLine());; // scanner input System.out.println(answer); // to do age ranges, each case number had to be defined by a range in switch switch ((0 &lt;= answer &amp;&amp; answer &lt;=1) ? 0 : // &quot;?&quot; is if and &quot;:&quot; is else, so in this case if the number inputted was between 0 and 1, then it would be set as case 0, if not then it would go on to the other cases (2 &lt;= answer &amp;&amp; answer &lt;=4) ? 1 : (5 &lt;= answer &amp;&amp; answer &lt;=12) ? 2 : (13 &lt;= answer &amp;&amp; answer &lt;=19) ? 3 : (20 &lt;= answer &amp;&amp; answer &lt;=39) ? 4 : (40 &lt;= answer &amp;&amp; answer &lt;=59) ? 5 : (60 &lt;= answer &amp;&amp; answer &lt;=130) ? 6 : 7) { case 0: System.out.println(&quot;You&#39;re a baby.&quot;); // if between age 0 and 1, then it prints you&#39;re a baby break; case 1: System.out.println(&quot;You&#39;re a toddler.&quot;); break; case 2: System.out.println(&quot;You&#39;re a child.&quot;); break; case 3: System.out.println(&quot;You&#39;re a teen.&quot;); break; case 4: System.out.println(&quot;You&#39;re a adult.&quot;); break; case 5: System.out.println(&quot;You&#39;re a middle-aged adult.&quot;); break; case 6: System.out.println(&quot;You&#39;re old.&quot;); break; case 7: System.out.println(&quot;How? I think you made a mistake.&quot;); //if not in the range of any of the previous cases break; default: System.out.println(&quot;Try again.&quot;); //if user input bypasses all cases break; } . How old are you?: 17 You&#39;re a teen. . De Morgan&#39;s Law . negate an and statement | negate an or statement | uses ! operator (not) | . public class Main{ public static void main(String[] arg){ boolean x = true; boolean y = false; if (!(y &amp;&amp; x)){ System.out.println(&quot;not(true and false) is true&quot;); } else { System.out.println(&quot;not(true and false) is false&quot;); } if (!(y) &amp;&amp; !(x)){ System.out.println(&quot;not true and not false is true&quot;); } else { System.out.println(&quot;not true and not false is false&quot;); } if (!(y || x)){ System.out.println(&quot;not(true or false) is true&quot;); } else { System.out.println(&quot;not(true or false) is false&quot;); } if (!(y) || !(x)) { System.out.println(&quot;not true or not false is true&quot;); } else { System.out.println(&quot;not true or not false is false&quot;); } } } Main.main(null); . not(true and false) is true not true and not false is false not(true or false) is false not true or not false is true .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/pbl/2022/09/10/booleans.html",
            "relUrl": "/cb/jupyter/pbl/2022/09/10/booleans.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Code.org Notebook",
            "content": ". Code.org notes . class, instantiate object, while loop . public class MyNeighborhood { //makes a class that is public, allows it to be accessed by any class public static void main(String[] args) { //starts the running of a java program Painter PainterPlus = new Painter(); // Instantiates an object (Painter) for class PainterPlus. while (myPainterPlus.isOnBucket()) { //while loop that takes paint from a bucket over and over again, as long as the painter is on the bucket myPainterPlus.takePaint(); } } } . extends, super(), make method . public class PainterPlus extends Painter { //&quot;extends&quot; extends a class, so in this case it extends Painter public PainterPlus() { super(); // super is reference variable to parent class, used to access variable, method, constructor, in base class from derived class } public void turnRight() { //making method turnRight turnLeft(); turnLeft(); turnLeft(); } public void moveOrTakePaint() { // if else method if (canMove()) { move(); } else { while (isOnBucket()) { takePaint(); } } } } . some notes . algorithm: instructions to complete task | method signature: has name and parameter list | ! operator: returns opposite of what is inputted(ie: input of true would output false) | concatenation: join 2 strings together | edge case: bug at highest/lowest end of a range of values | .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/pbl/2022/09/04/week2-codeorg.html",
            "relUrl": "/cb/jupyter/pbl/2022/09/04/week2-codeorg.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java Using Objects",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.math.*; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Significant Figures&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } public static void significant(String[] args) { Scanner input; System.out.print(&quot;Enter 1st number: &quot;); input = new Scanner(System.in); String input1 = input.nextLine(); System.out.println(input1); System.out.print(&quot;Enter 2nd number: &quot;); input = new Scanner(System.in); String input2 = input.nextLine(); System.out.println(input2); var y = significantDigits(new BigDecimal(input1)); var z = significantDigits(new BigDecimal(input2)); System.out.print(&quot;The number of significant figures for your first input: &quot;); System.out.println(y); System.out.print(&quot;The number of significant figures for your second input: &quot;); System.out.println(z); if(y &gt; z) { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + z); } else if(z &gt; y) { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + y); } else { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + z); } } private static int significantDigits(BigDecimal input) { input = input.stripTrailingZeros(); return input.scale() &lt; 0 ? input.precision() - input.scale() : input.precision(); // if input.scale is less than 0 (which would be the sig figs after the decimal point), then it subtracts input scale from input precision, which is the number of digits. Other wise it just sticks with input precision. } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;bye&quot;); quit = true; break; case 1: significant(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Choose from these choices - 1 - Significant Figures 0 - Quit - 1: Enter 1st number: 54 Enter 2nd number: 70.001 The number of significant figures for your first input: 2 The number of significant figures for your second input: 5 The number of significant figures that would be used if these two numbers were multiplied together would be: 2 .",
            "url": "https://samuelwaang.github.io/samuel/pbl/2022/08/29/AP-using_java_objects.html",
            "relUrl": "/pbl/2022/08/29/AP-using_java_objects.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Primitives Notebook",
            "content": "Use of primitives, wrapper class object . import java.util.Scanner; public class ScanPrimitives { public static void main(String[] args) { Scanner input; // enter number input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); //enter a number that can contain decimals input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // enter a true or false input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); boolean firstInputBoolean = input.nextBoolean(); System.out.println(firstInputBoolean); System.out.print(&quot;Enter 2nd boolean: &quot;); boolean secondInputBoolean = input.nextBoolean(); System.out.println(secondInputBoolean); try { if (firstInputBoolean != secondInputBoolean) { // one input was true and one was false System.out.print(&quot;The Or gate is true, as the inputted booleans are different.&quot;); } else { // the inputs were the same System.out.print(&quot;The Or gate is false, as the inputted booleans are the same.&quot;); } } catch (Exception e) { System.out.println(&quot;Not an boolean (needs to be true or false), &quot; + e); } input.close(); System.out.println(&quot;&quot;); // enter a string (basically anything) input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 5 Enter a double: 5.0 Enter a boolean: true Enter 2nd boolean: true The Or gate is false, as the inputted booleans are the same. Enter a String: p . code.org . int divided = 5 / 2; double doubleDivided = 5.0 / 2; System.out.println(&quot;When the integer was divided, instead of 2.5 like the double, the answer turns out to be 2, so it seems like the calculation was truncated.&quot;); System.out.println(&quot;Integer 5 / 2 is &quot; + divided); System.out.println(&quot;Double 5 / 2 is &quot; + doubleDivided); . When the integer was divided, instead of 2.5 like the double, the answer turns out to be 2, so it seems like the calculation was truncated. Integer 5 / 2 is 2 Double 5 / 2 is 2.5 . compounds assignment . import java.util.Scanner; public class main { public static void main(String[] args){ Scanner input; input = new Scanner(System.in); System.out.print(&quot;Enter 1st string: &quot;); String firstInputString = input.nextLine(); System.out.println(firstInputString); System.out.print(&quot;Enter 2nd string: &quot;); String secondInputString = input.nextLine(); System.out.println(secondInputString); try { firstInputString += secondInputString; System.out.println(&quot;The strings combined are: &quot; + firstInputString + &quot;.&quot;); } catch (Exception e) { System.out.println(&quot;Enter a string&quot; + e); } } } main.main(null); . Enter 1st string: hi Enter 2nd string: bye The strings combined are: hi bye. . Pounds to Kilograms . import java.util.Scanner; public class main { public static void main(String[] args){ Scanner input; input = new Scanner(System.in); System.out.println(&quot;Enter a number of pounds: &quot;); try { double inputPounds = input.nextDouble(); var outputPounds = inputPounds; outputPounds = outputPounds * 0.453592; System.out.println(inputPounds + &quot; pounds is &quot; + outputPounds + &quot; kg.&quot;); } catch (Exception e) { System.out.println(&quot;Enter a number&quot; + e); } } } main.main(null); . Enter a number of pounds: 5.0 pounds is 2.26796 kg. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/jupyter/pbl/2022/08/27/primitives.html",
            "relUrl": "/fastpages/jupyter/pbl/2022/08/27/primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Capture Information Plan",
            "content": "Capture Information . I can capture information through fastpages. I can do both notes and also comments in code to document the stuff I learned. To be able to find these notes easier later, I can put the word &quot;notes&quot; in the categories section of each fastpages/post as a tag. . PBL vs Collegeboard . For collegeboard, I can put in the categories section of a post/fastpage the word &quot;CB&quot;. For PBL, I could do the same and put &quot;PBL&quot; instead of &quot;CB&quot;. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/jupyter/2022/08/27/capture-info.html",
            "relUrl": "/fastpages/jupyter/2022/08/27/capture-info.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Bash Notebook Installations",
            "content": "Cloning Project . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/samuel # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/Samuelwaang/samuel&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/samuelwaang/vscode exists. Directory /home/samuelwaang/vscode/samuel exists. . Python Versions . python2 --version python3 --version . Python 2.7.18 Python 3.9.12 . Java Versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Kernels . jupyter kernelspec list . Available kernels: bash /home/samuelwaang/.local/share/jupyter/kernels/bash java /home/samuelwaang/.local/share/jupyter/kernels/java javascript /home/samuelwaang/.local/share/jupyter/kernels/javascript python3 /home/samuelwaang/.local/share/jupyter/kernels/python3 . Notes . prints directory . cd $project pwd . /home/samuelwaang/vscode/samuel . folders/files of directory . ls . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word . folders/files of directory, including the hidden ones . list all files in long format . ls -al . total 488 drwxr-xr-x 16 samuelwaang samuelwaang 4096 Aug 26 10:34 . drwxr-xr-x 6 samuelwaang samuelwaang 4096 Aug 23 10:20 .. -rw-r--r-- 1 samuelwaang samuelwaang 420 Aug 20 13:49 .devcontainer.json drwxr-xr-x 8 samuelwaang samuelwaang 4096 Aug 27 17:44 .git -rw-r--r-- 1 samuelwaang samuelwaang 84 Aug 20 13:49 .gitattributes drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 20 13:49 .github -rw-r--r-- 1 samuelwaang samuelwaang 161 Aug 20 13:49 .gitignore -rw-r--r-- 1 samuelwaang samuelwaang 207007 Aug 20 13:49 2022-05-15-07-21-16.png -rw-r--r-- 1 samuelwaang samuelwaang 90979 Aug 20 13:49 2022-05-15-07-24-25.png -rw-r--r-- 1 samuelwaang samuelwaang 81691 Aug 20 13:49 2022-05-15-07-25-15.png -rwxr-xr-x 1 samuelwaang samuelwaang 1304 Aug 20 13:49 Gemfile -rw-r--r-- 1 samuelwaang samuelwaang 11351 Aug 20 13:49 LICENSE -rwxr-xr-x 1 samuelwaang samuelwaang 1422 Aug 20 13:49 Makefile -rwxr-xr-x 1 samuelwaang samuelwaang 3605 Aug 20 13:49 README.md drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _action_files -rw-r--r-- 1 samuelwaang samuelwaang 3606 Aug 26 10:33 _config.yml drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _fastpages_docs drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _includes drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _layouts drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 26 10:37 _notebooks drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 26 10:33 _pages drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _plugins drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 26 10:33 _posts drwxr-xr-x 3 samuelwaang samuelwaang 4096 Aug 20 13:49 _sass drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _word drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 20 13:49 assets -rwxr-xr-x 1 samuelwaang samuelwaang 1136 Aug 20 13:49 docker-compose.yml drwxr-xr-x 3 samuelwaang samuelwaang 4096 Aug 26 10:33 images -rw-r--r-- 1 samuelwaang samuelwaang 91 Aug 26 10:33 index.html . lists files in a folder . cd $posts pwd ls -l . /home/samuelwaang/vscode/samuel/_posts total 12 -rwxr-xr-x 1 samuelwaang samuelwaang 1966 Aug 20 13:49 2020-01-14-test-markdown-post.md -rw-r--r-- 1 samuelwaang samuelwaang 181 Aug 26 10:33 2022-08-19-random-post.md -rw-r--r-- 1 samuelwaang samuelwaang 720 Aug 20 13:49 README.md . prints what&#39;s in the file . cat README.md . ⚠️ Do not delete this directory! You can delete the blog post files in this directory, but you should still keep this directory around as Jekyll expects this folder to exist. # Auto-convert markdown files To Posts [`fastpages`](https://github.com/fastai/fastpages) will automatically convert markdown files saved into this directory as blog posts! You must save your notebook with the naming convention `YYYY-MM-DD-*.md`. Examples of valid filenames are: shell 2020-01-28-My-First-Post.md 2012-09-12-how-to-write-a-blog.md # Resources - [Jekyll posts](https://jekyllrb.com/docs/posts/) - [Example markdown post](https://github.com/fastai/fastpages/blob/master/_posts/2020-01-14-test-markdown-post.md) . Hack . checks for python modules . test=&quot;python&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hff7bd54_1 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 . Install java kernel if missing . test=&quot;java&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$test is already installed&quot; else wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python install.py echo &quot;$test has been installed&quot; fi . java is already installed . Update Repository . echo &quot;pulling...&quot; git pull . pulling... Already up to date. . echo &quot;committing...&quot; git commit -a -m &quot;New Commit&quot; . committing... [master 50861e6] New Commit 1 file changed, 3 insertions(+), 3 deletions(-) .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/jupyter/pbl/2022/08/25/bash-notebook.html",
            "relUrl": "/fastpages/jupyter/pbl/2022/08/25/bash-notebook.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "random post",
            "content": "hi . I’m samuel .",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/08/19/random-post.html",
            "relUrl": "/markdown/2022/08/19/random-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Python Notebook",
            "content": "msg = &quot;hi&quot; print(msg) . hi . A simple keypad made with a for loop we made last school year. . matrix = [ [1,2,3],[4,5,6],[7,8,9] ] for num2 in matrix: for num1 in num2: print (num1, end=&quot; &quot;) print() . 1 2 3 4 5 6 7 8 9 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/jupyter/pbl/2022/08/19/python-notebook.html",
            "relUrl": "/fastpages/jupyter/pbl/2022/08/19/python-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Java Notebook",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hi&quot;); } } HelloStatic.main(null); . Hi .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/jupyter/pbl/2022/08/19/java-notebook.html",
            "relUrl": "/fastpages/jupyter/pbl/2022/08/19/java-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samuelwaang.github.io/samuel/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . By Samuel, a student in CSA. . Samuel, CSA student. &#8617; . |",
          "url": "https://samuelwaang.github.io/samuel/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samuelwaang.github.io/samuel/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
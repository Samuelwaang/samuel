{
  
    
        "post0": {
            "title": "Sort",
            "content": "Bubble and Insertion Sorting . import java.util.ArrayList; // extends generic interface comparable&lt;t&gt;, defines compareTo class TQueue&lt;T extends Comparable&lt;T&gt;&gt; { private List&lt;T&gt; items; // initializes the items variable to a new ArrayList public TQueue() { items = new ArrayList&lt;&gt;(); } //adds elements public void enqueue(T item) { items.add(item); } public T dequeue() { if (items.isEmpty()) { return null; } return items.remove(0); } //bubblesort function that compares elements next to each other, if the first element is greater than the second, then swap public void bubbleSort() { int n = items.size(); for (int i = 0; i &lt; n-1; i++) { for (int j = 0; j &lt; n-i-1; j++) { if (items.get(j).compareTo(items.get(j+1)) &gt; 0) { //use compareTo to compare 2 elements T temp = items.get(j); items.set(j, items.get(j+1)); items.set(j+1, temp); } } } } public void insertionSort() { int n = items.size(); for (int i = 1; i &lt; n; i++) { T key = items.get(i); // assigns element to key int j = i - 1; while (j &gt;= 0 &amp;&amp; items.get(j).compareTo(key) &gt; 0) { //checks if j value is greater than key, if it is then the element at j is moved to the right items.set(j+1, items.get(j)); j--; // goes back to continue comparing key } items.set(j+1, key); //puts key at correct spot, sets value of j+1 to value of key, puts key in correct position } } @Override public String toString() { if (isEmpty()) { return &quot;[]&quot;; } StringBuilder sb = new StringBuilder(); sb.append(&quot;[&quot;); for (T item : items) { sb.append(item.toString()); sb.append(&quot;, &quot;); } sb.setLength(sb.length() - 2); sb.append(&quot;]&quot;); return sb.toString(); } } public class TQueue { public static void main(String[] args) { // Generic T Queue GenericTQueue&lt;Integer&gt; queue = new GenericTQueue&lt;&gt;(); queue.enqueue(3); queue.enqueue(1); queue.enqueue(4); queue.enqueue(1); queue.enqueue(5); queue.enqueue(9); queue.enqueue(2); queue.enqueue(6); queue.enqueue(5); System.out.println(&quot;Before: &quot; + queue.toString()); queue.bubbleSort(); System.out.println(&quot;Bubble Sorting&quot;); System.out.println(&quot;After: &quot; + queue.toString()); GenericTQueue&lt;Integer&gt; queue1 = new GenericTQueue&lt;&gt;(); queue1.enqueue(3); queue1.enqueue(1); queue1.enqueue(4); queue1.enqueue(1); queue1.enqueue(5); queue1.enqueue(9); queue1.enqueue(2); queue1.enqueue(6); queue1.enqueue(5); System.out.println(&quot;Insertion Sorting&quot;); queue1.insertionSort(); System.out.println(&quot;After sorting: &quot; + queue1.toString()); } } TQueue.main(null); . Before: [3, 1, 4, 1, 5, 9, 2, 6, 5] Bubble Sorting After: [1, 1, 2, 3, 4, 5, 5, 6, 9] Insertion Sorting After sorting: [1, 1, 2, 3, 4, 5, 5, 6, 9] .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/03/28/sort.html",
            "relUrl": "/fastpages/cb/2023/03/28/sort.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Collections",
            "content": "public class Stack { private int[] arr; private int top; private int capacity; public Stack(int size) { arr = new int[size]; capacity = size; top = -1; } public void push(int x) { if (isFull()) { System.out.println(&quot;Stack is full.&quot;); return; } arr[++top] = x; } public int pop() { if (isEmpty()) { System.out.println(&quot;Stack is empty.&quot;); return -1; } return arr[top--]; } public int peek() { if (isEmpty()) { System.out.println(&quot;Stack is empty.&quot;); return -1; } return arr[top]; } public boolean isEmpty() { return top == -1; } public boolean isFull() { return top == capacity - 1; } public static void main(String[] args) { Stack stack = new Stack(5); stack.push(1); stack.push(2); stack.push(3); stack.push(4); stack.push(5); stack.push(6); System.out.println(&quot;Peek: &quot; + stack.peek()); System.out.println(&quot;Pop: &quot; + stack.pop()); System.out.println(&quot;Pop: &quot; + stack.pop()); System.out.println(&quot;Peek: &quot; + stack.peek()); } } Stack.main(null); . Stack is full. Peek: 5 Pop: 5 Pop: 4 Peek: 3 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/03/25/stack.html",
            "relUrl": "/fastpages/cb/2023/03/25/stack.html",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Collections",
            "content": "Generics . public abstract class Generics { public final String masterType = &quot;Generic&quot;; // This string is used to indicate the type of the object. private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . Group Class . public class Group extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer, sets order of elements which is set to title public static void setOrder(KeyTypes key) {Group.key = key;} public enum KeyType implements KeyTypes {title, name, grade, period} // Instance data private final String name; private final int grade; private final int period; // Constructor Group(String name, int grade, int period) { this.setType(&quot;Person&quot;); this.name = name; this.grade = grade; this.period = period; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Group.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.grade.equals(this.getKey())) { output += this.grade; } else if (KeyType.period.equals(this.getKey())) { output += this.period; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.grade + &quot;, &quot; + this.period; } return output; } // Test data initializer public static Group[] Group() { return new Group[]{ new Group(&quot;Samuel&quot;, 12, 2), new Group(&quot;Everitt&quot;, 12, 2), new Group(&quot;Sahil&quot;, 12, 2), }; } public static void main(String[] args) { // Inheritance Hierarchy Group[] objs = Group(); // print with title Group.setOrder(KeyType.title); Group.print(objs); Group.setOrder(KeyType.name); Group.print(objs); } } Group.main(null); . class [LREPL.$JShell$13C$Group; 3 Generic: Person listed by title Person: Samuel, 12, 2 Person: Everitt, 12, 2 Person: Sahil, 12, 2 class [LREPL.$JShell$13C$Group; 3 Generic: Person listed by name Samuel Everitt Sahil . public class LinkedList&lt;T&gt; // A doubly linked list is a data structure that consists of a sequence of nodes, where each node contains a value and two pointers, one to the previous node and one to the next node { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.*; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Group.setOrder(Group.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;,Group.Group()); qGenerics.printQueue(); qGenerics.queue.add(new Group(&quot;Person&quot;, 99, 2)); qGenerics.printQueue(); } } QueueTester.main(null); . My Generics count: 3 My Generics data: Samuel Everitt Sahil My Generics count: 3 My Generics data: Samuel Everitt Sahil Person . public static Queue shuffle(Queue q) { Object[] arr = q.toArray(); // Convert queue to array Random rand = new Random(); for (int i = arr.length - 1; i &gt; 0; i--) { int j = rand.nextInt(i + 1); // Pick a random index to swap with Object temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } Queue shuffled = new Queue(); for (Object obj : arr) { shuffled.add(obj); // Convert array back to queue } return shuffled; } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/03/14/collections.html",
            "relUrl": "/fastpages/cb/2023/03/14/collections.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Test Corrections",
            "content": "Score . . Q5 . . The answer is C. The answer I chose was only true if x is true and y is false. The boolean stuff is still kind of confusing to me. A is correct as you need both sides to be true. . Q8 . . The answer is B, as the final iteration to the loop when j is 3, result[3] is the product of row 1,column 3 and row 3, column 2. So, the result[3] is assigned to value 4. . Q12 . . The answer is B. If x and y have different values, it results in false. According to De Morgan&#39;s law, the second part is !x &amp;&amp; !y, so (x&amp;&amp;y) &amp;&amp; (!x &amp;&amp; !y) will always be false. . Q25 . . The answer is C. The answer I chose would be the value of count if inner loop started at 0 instead of x. The answer is c, as at the last iteration of the outer loop, inner loop iterates one more time, letting count be 10. . Q31 . . The answer is E. The answer I chose iterates board and set locations where row -- col to x and row + column == board.length-1 to &quot;X&quot;. Starting out, first set of nested for loops set each element in board to &quot;o&quot;. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/03/11/test-corrections.html",
            "relUrl": "/fastpages/cb/2023/03/11/test-corrections.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Types",
            "content": "Java Methods . a method is a block of code that performs a specific task and can be called by other parts of the program . | a method consists of a method signature, which includes the method name, return type, and parameter list, and a method body, which contains the code that is executed when the method is called . | . Method example . public int addNumbers(int num1, int num2) { int sum = num1 + num2; return sum; } System.out.println(addNumbers(10, 20)); . 30 . Java Control Structures . control structures are constructs that allow you to control the flow of execution in a program . | they let you execute specific statements or blocks of code based on certain conditions . | some examples: if-else, for loop, while loop, switch case . | . IntByReference . The IntByReference class uses the integer primitive and its function is swapping the two inputted numbers, if the first is greater than the second . | A wrapper class is used to change a primitive int into an Integer object . | the Integer object is turned back into a primitive type &quot;tmp&quot; to switch values . | . public class IntByReference { // sets primitive private int value; //wrapper class public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } // function to swap the values public void swapToLowHighOrder(IntByReference i) { // if first value larger than second, then swap if (this.value &gt; i.value) { //sets the first value back to a primitive type int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); // creates objects with wrapper class using primitive int IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); //calls method System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/03/11/data-types.html",
            "relUrl": "/fastpages/cb/2023/03/11/data-types.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Test Corrections 52 Questions",
            "content": "Score . . Test Corrections . . The answer is D. I got confused with the order of the for loops so I messed up on that one. . . The answer is D, as this finds the positive difference between num and val and finds if it less than minDiff, which will find which num is closest to the val. The answer I chose only found if the num was larger than val. . . The variables j and k have the same values 5 times, which happens at 0,1,2,3,4. So, println is called 5 times. . . The answer I chose was what would happen if the statement printed the value at index k. It prints values that are greater than its index. . . I only chose option 2 when option 1 was also a correct answer. The first option calls the get method to get a Value object. The second is correct as it uses an enhanced for loop to call getNum to access num. . I did a lot better on this mc compared to past ones. However, I still have to pay attention more when traversing for loops as I often get confused or lose track of where I am. Otherwise, I didn&#39;t have too many difficulties. . public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$32$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$32$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2023/01/30/test-corrections-1.html",
            "relUrl": "/fastpages/cb/2023/01/30/test-corrections-1.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 10 - Recursion",
            "content": "Vocab . recursive methods . are methods that call themselves over and over | the parts are a base call and recursive call | eventually, the base case will be reached, stopping recursion | recursive methods hve call stack that checks how many times a recursive function is called | . public static int multiply(int a, int b) { if (b==0) { return 0; } else { return multiply(a, b - 1 ) + a; } } multiply(2,2); . 4 . Binary search . halves an array over and over until a value is found | this is more efficient than linear search | . import java.util.*; class Main { int binarySearch(int arr[], int l, int r, int x) { if (r &gt;= l &amp;&amp; l &lt;= arr.length - 1) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] &gt; x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } public static void main(String args[]) { Main ob = new Main(); int arr[] = { 2, 3, 4, 10, 40 }; int n = arr.length; int x = 10; int result = ob.binarySearch(arr, 0, n - 1, x); if (result == -1) System.out.println(&quot;Element not present&quot;); else System.out.println(&quot;Element found at index &quot; + result); } } GFG.main(null); . Element found at index 3 . Linear recursion . function that only makes one call to itself everytime func runs | . int factorial (int n) { //ex of linear if (n==0) { return 1; } return n* factorial (n-1); } factorial(5); . 120 . Selection sort . finds minimum element from the unsorted and put it at the end of the sorted | . import java.io.*; public class Main { void sort(int arr[]) { int n = arr.length; for (int i = 0; i &lt; n-1; i++) { int min_idx = i; for (int j = i+1; j &lt; n; j++) if (arr[j] &lt; arr[min_idx]) min_idx = j; int temp = arr[min_idx]; arr[min_idx] = arr[i]; arr[i] = temp; } } void printArray(int arr[]) { int n = arr.length; for (int i=0; i&lt;n; ++i) System.out.print(arr[i]+&quot; &quot;); System.out.println(); } public static void main(String args[]) { Main ob = new Main(); int arr[] = {5,14,2,90,41}; ob.sort(arr); System.out.println(&quot;Sorted array&quot;); ob.printArray(arr); } } Main.main(null); . Sorted array 2 5 14 41 90 . Merge Sort . used to sort arraylists | splits array into 2 halves, calls itself, then merges them, to do this, the merge function is used | . class MergeSort { void merge(int arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; int L[] = new int[n1]; int R[] = new int[n2]; for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i &lt; n1) { arr[k] = L[i]; i++; k++; } while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } void sort(int arr[], int l, int r) { if (l &lt; r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static void printArray(int arr[]) { int n = arr.length; for (int i = 0; i &lt; n; ++i) System.out.print(arr[i] + &quot; &quot;); System.out.println(); } public static void main(String args[]) { int arr[] = { 12, 11, 13, 5, 6, 7 }; System.out.println(&quot;Given Array&quot;); printArray(arr); MergeSort ob = new MergeSort(); ob.sort(arr, 0, arr.length - 1); System.out.println(&quot; nSorted array&quot;); printArray(arr); } } MergeSort.main(null); . Given Array 12 11 13 5 6 7 Sorted array 5 6 7 11 12 13 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/12/13/unit10.html",
            "relUrl": "/fastpages/cb/2022/12/13/unit10.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 9 - Inheritance",
            "content": "Vocab . constructor: Where the attributes of a class are defined | Overriding: allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass will override the method in the super-class. | Polymorphism: running mutliple things at once with the same name, can be done with different amounts of parameters in method | toString method defines and JSONify&#39;s data | protected is an access modifier so that the attribute isn&#39;t affected by outside modifiers. | to use constructor of superclass in subclass, need to use super keyword, allowing use of constructors that were made in the superclass | . Hack 1 . In your own notebook, make any class with 2 attributes and 0 methods. Create a 2 argument constructor for that class. This will be your superclass. Now, create a subclass that extends from the superclass you made. Create 1 additional attribute in your subclass that was not present in the superclass. . Then, create a constructor for the subclass that uses the superclass constructor with the super keyword, and then adds an additional assignment for the third attribute. . public class Animal { protected double mass; //protected so the attribute isn&#39;t modified outside by outside modifiers protected double lifespan; public Animal(double mass, double lifespan) { //constructor with parameters of mass and lifespan this.mass = mass; this.lifespan = lifespan; } public class Dog extends Animal { //extends superclass into dog subclass protected String color; public Dog(double mass, double lifespan, String color) { //another constructor super(mass, lifespan); this.color = color; } } } . Hack 2 . Add a method to the superclass you created before. This method should be very general; it should only have functionality that you know for sure will be needed in almost every single subclass. In your subclass, override this method. Remember that overriding the method will give your subclass the specific functionality it needs from that method. . public class Animal { protected double mass; protected double lifespan; public Animal(double mass, double lifespan) { this.mass = mass; this.lifespan = lifespan; } public void sound() { System.out.println(&quot;sound&quot;); } public class Dog extends Animal { protected String color; public Dog(double mass, double lifespan, String color) { super(mass, lifespan); this.color = color; } @Override public void sound() { //overrides the sound method, by printing woof instead of sound System.out.println(&quot;woof&quot;); } } } . polymorphism allows doing a bunch of this in a bunch of ways with inheritance | runtime polymorphism is method overriding | having two methods with same name but different args and functionalities is method overloading, called static polymorphism | early binding is when compiler decides method to be called | . Hack 3 . Create another subclass from your original superclass. Now, implement method overloading in this subclass. Remember that this means having two methods with the same name, but with different arguments. The method you are using for method overloading doesn&#39;t have to exist in the superclass. This will implement Static Polymorphism. . Next, override the method in your superclass in your new subclass. Make sure it has different functionality than your method in the other subclass. This will implement Runtime Polymorphism. . public class Animal { protected double mass; protected double lifespan; public Animal(double mass, double lifespan) { this.mass = mass; this.lifespan = lifespan; } public void sound() { System.out.println(&quot;sound&quot;); } public void die(boolean a) { System.out.println(&quot;the cat is dead: &quot; + a); //method to be overloaded } public class Dog extends Animal { protected String color; public Dog(double mass, double lifespan, String color) { super(mass, lifespan); this.color = color; } @Override public void sound() { System.out.println(&quot;woof&quot;); } } public class Cat extends Animal { //make another subclass for Cat that extends off of Animal protected String breed; public Cat(double mass, double lifespan, String breed) { super(mass, lifespan); this.breed = breed; } @Override public void sound() { //overrides the sound System.out.println(&quot;meow&quot;); } public void die(boolean a, boolean b) { //method overloading System.out.println(&quot;the cat is dead: &quot; + a + b); } } } . equals Method . Compares two strings | Returns a boolean value of true if equal, otherwise returns false | . toString method example, which prints out the attributes of object . public String dayOfWeekToString() { return (&quot;{ &quot;month &quot;: &quot; + this.month + &quot;, &quot; + &quot; &quot;day &quot;: &quot; + this.day + &quot;, &quot; + &quot; &quot;year &quot;: &quot; + this.year + &quot;, &quot; + &quot; &quot;dayOfWeek &quot;: &quot; + this.dayOfWeek + &quot; }&quot;); } public String toString() { return dayOfWeekToString(); } .",
            "url": "https://samuelwaang.github.io/samuel/cb/2022/12/12/inheritance-lesson.html",
            "relUrl": "/cb/2022/12/12/inheritance-lesson.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Some Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . ## Declaring a 2D array: DataType[][] nameOf2DArray | . | ## Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; System.out.print(arr[2][2]); // Print the last element in the array! } } Test.main(null); . i . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); if(arr[2][0] == &quot;Austin&quot;) { arr[2][0] = &quot;Athens&quot;; } System.out.println(arr[2][0]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loops: . to print out an array, use nested loop which is a for loop within another | . public class Test { public static void main(String[] args) { String[][] arr = { //making a 2d array { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { //nested for loop here, where the columns are printed by rows for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; for(int i = 0; i &lt; arr.length; i++) { for(int j = 0; j &lt; arr.length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . enhanced for loop . used to traverse through 2d arrays or collections, can only go up by 1 and only forward ### .equals method | checks if something is equal to another | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { //for each or enhanced loop used for (String item : row) { if (item.equals(name)) { //.equals method to check if item is equal to name match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Hack 4 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; for(int i = 0; i &lt; arr.length; i++) { for(int j = 0; j &lt; arr[i].length; j++) { //loops through with nested for loop if (arr[i][j].length() &gt; longest.length()) { //checks length if word, if longer then it replaces longest = arr[i][j]; } } } System.out.println(&quot;Longest string: &quot; + longest); } } Test.main(null); . Longest string: Cincinnati . HW FRQ . 4a . public static Position findPosition(int num, int[][] intArr) { for(int r = 0; r &lt; intArr.length; r++) for(int c = 0; c &lt; intArr[0].length; c++) if(intArr[r][c] == num) return new Position(r, c); return null; } . 4b . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] successors = new Position[intArr.length][intArr[0].length]; for(int r = 0; r &lt; successors.length; r++) for(int c = 0; c &lt; successors[0].length; c++) successors[r][c] = findPosition(intArr[r][c] + 1, intArr); return successors; } .",
            "url": "https://samuelwaang.github.io/samuel/jupyter/2022/12/05/2d-array.html",
            "relUrl": "/jupyter/2022/12/05/2d-array.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "csa vocab",
            "content": "Casting, specifically for Division . Change a variable’s type, so for example changing an int to a double or vice versa | . int num1 = 50; int num2 = 56; double round; double intaverage = num1 / num2; double doubaverage = (double)num1 / num2; System.out.println(&quot;dividing with integer(also truncating): &quot; + intaverage); System.out.println(&quot;dividing with double: &quot; + doubaverage); . dividing with integer(also truncating): 0.0 dividing with double: 0.8928571428571429 . Casting, specifically for Truncating or Rounding . Truncate by changing a double to an int, this removes everything after the decimal | A trick to round with casting is to change a double to an int, but before doing this, add .5 if a positive integer and subtract .5 if a negative integer | . Wrapper Classes, why wrap int, double. Show examples . Wrapper classes allow converting primitives into objects and vice versa, which allows java to be object oriented, as primitives aren’t an object by default | Someone may use a wrapper class on int to convert it to an object as they contain many methods to deal with an int value like converting it to a string representation, this is the same for doubles | . Concatenation . Concatenation is combining 2+ strings to make a string using either the + or += operator or the concat() method | concat() is immutable, so you need to set it to a string so a.concat() wouldn&#39;t work, but a = a.concat() would | to concatenate multiple data types, you need to use + and not concat method, os this would allow concating a string and a integer for example | . public class Main{ public static void main(String args[]){ int a=20; Integer i=Integer.valueOf(a);//converting int into Integer String string = i.toString(); //converting the Integer to a string, this doesn&#39;t work with the primitive String string1 = &quot; 2&quot;; String string2 = string.concat(string1); //using concat String otherdata = string+a; System.out.println(a+&quot; &quot;+i); System.out.println(&quot;concat 20 and 2 together: &quot; +&quot; &quot; +string2); System.out.println(&quot;concat a string and integer: &quot; +&quot; &quot; +otherdata); }} Main.main(null); . 20 20 concat 20 and 2 together: 20 2 concat a string and integer: 2020 . Math Class . java math class provides many math methods that allow finding different things, such as a max or min function | math.random will return a number between 0.0 and 1.0, or you can multiply it to get 1 to 100 (seen in code) | . for (int i = 0; i &lt;5; i++) { int randomNum = (int)(Math.random() * 101); System.out.println(randomNum); } . 6 46 11 25 93 . Compound Boolean Expression . this includes using the &amp;&amp;, ||, and ! operators, | . public class TestNum { public static void main(String[] args) { int score = 10; if (score &lt; 0 || score &gt; 100) { System.out.println(&quot;Score has an illegal value.&quot;); } if (score &gt;= 0 &amp;&amp; score &lt;= 100) { System.out.println(&quot;Score is in the range 0-100&quot;); } if (score != 10) { System.out.println(&quot;pick a different score&quot;); } } } TestNum.main(null) . Score is in the range 0-100 . Truth Tables . define boolean function by choosing value for each possible value of arguments, use truth table to do so | . . De Morgan&#39;s Law . the complement of the union of two sets A and B is equal to the intersection of the complement of the sets A and B | !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . if (!(true &amp;&amp; false) == ((!true)||(!false))) { System.out.print(&quot;these statements are equivalent&quot;); } else { System.out.print(&quot;not the same&quot;); } . Comparing Numbers . can compare numbers using the equals method | can compare numbers using compare method | operators such as &lt;, &gt;, == can be used | . Integer x = 0; Integer y = 0; if(x.equals(y)) { System.out.println(&quot;Both x and y are equal&quot;); } else { System.out.println(&quot;x and y are not equal&quot;); } int comp = Integer.compare(x, y); if(comp&gt;0) { System.out.println(&quot;x is greater than y&quot;); }else if (comp&lt;0){ System.out.println(&quot;x is less than y&quot;); }else{ System.out.println(&quot;x and y are equal&quot;); } . Both x and y are equal x and y are equal . Comparing Strings . can use equals method to compare two strings based on content in string | equalsIgnoreCase method compares two strings no matter the case | . String string = &quot;Sdsad&quot;; String string1 = &quot;sdsad&quot;; System.out.println(string.equals(string1)); System.out.println(string.equalsIgnoreCase(string1)); . false true . Comparing Objects . equals and hashCode methods can be used to compare objects | equals method compares equality of two objects | . import java.io.*; class Pet { String name; int age; String breed; Pet(String name, int age, String breed) { this.name = name; this.age = age; this.breed = breed; } } public class Main { public static void main(String args[]) { Pet dog1 = new Pet(&quot;Snow&quot;, 3, &quot;German Shepherd&quot;); Pet cat = new Pet(&quot;Jack&quot;, 2, &quot;Tabby&quot;); Pet dog2 = new Pet(&quot;Snow&quot;, 3, &quot;German Shepherd&quot;); System.out.println(dog1.equals(dog2)); } } Main.main(null); . false . for loop, enhanced loop . enhanced for loops are easier to use and errors will usually happen less, as you don&#39;t have to manage steps by themselves, but for loops allows you to control everything about looping | for loops you can change by how many steps it iterates and if it goes backwards or forwards | enhanced for loops will just go forward and increment its steps by 1 | . while loop versus do while loop . while loops are loos that keep continuing until a boolean isn&#39;t met anymore | do while loops are the same as while loops except for the loop checking for the conditions after checking a statement | . nested loops . a nested loop is a loop inside of another loop | . class Main { public static void main(String[] args) { int weeks = 3; int days = 7; for (int i = 1; i &lt;= weeks; ++i) { System.out.println(&quot;Week: &quot; + i); for (int j = 1; j &lt;= days; ++j) { System.out.println(&quot; Day: &quot; + j); } } } } Main.main(null); . Week: 1 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 2 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 3 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 . Creating a Class . a class is an object constructor or something used to make objects | use the keyword class to create a class | classes can have more than one class, which is called a nested class | for the outside class, only public, abstract, strictfp, and final can be used to modify class, but inside, private, protected, and static can be used | .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/12/01/csa-vocab.html",
            "relUrl": "/fastpages/cb/2022/12/01/csa-vocab.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 6 - Arrays",
            "content": "Arrays . store one data type | have fixed size | denoted with {} | . dataType[] arrayName = new dataType[numberOfItems]; int[] arraySample = {1,3,5,7,9}; . Hack 1 . How do we access the even numbers in arrayOne from above? . int[] arrayOne = {1, 3, 5, 7, 9}; for(int i = 0; i &lt; arrayOne.length; i++) { System.out.println(arrayOne[i]); } . 1 3 5 7 9 . Traversing arrays . done with using loops | . String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Fruit number 0 is Apple Fruit number 1 is Strawberry Fruit number 2 is Watermelon Fruit number 3 is Blueberry . Possible errors . a bound error where ArrayIndexOutOfBoundsException happens is when loops are being used | loops through more than there are elements in the array | . String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length+1; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Fruit number 0 is Apple Fruit number 1 is Strawberry Fruit number 2 is Watermelon Fruit number 3 is Blueberry . java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4 at .(#22:1) . class Main { static int length; public static void printArray(int[] array) { for (int i = 0; i &lt; length; i++) { System.out.print(array[i] + &quot; &quot;); } System.out.println(); } public static void sortArray(int[] array) { int temporary = 0; for (int i = 0; i &lt; length; i++) { for (int j = i + 1; j &lt; length; j++) { if (array[i] &gt; array[j]) { temporary = array[i]; array[i] = array[j]; array[j] = temporary; } } } System.out.println( &quot;Elements of array sorted in ascending order: &quot;); printArray(array); } public static void main(String[] args) { int[] array = new int[] { -5, -9, 8, 12, 1, 3 }; length = array.length; sortArray(array); } } Main.main(null); . Elements of array sorted in ascending order: -9 -5 1 3 8 12 . Enhanced for loops for arrays . are for loops that can only go forward | . for (dataType i: arrayName) { System.out.print(&quot;hi&quot;); } . Making algorithms with arrays . use array.length to find number of elements in an array | to find a specific element, do arrayname[element number] | . ie: finding sum . int[] array = {3, 2, 4, 17}; int sum = 0; for (int number: array) { sum += number; } System.out.println(sum); . 26 . frq . public void addMembers(String[] names, int gradYear) { for(String name : names) memberList.add(new MemberInfo(name, gradYear, true)); } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/11/30/unit6.html",
            "relUrl": "/fastpages/cb/2022/11/30/unit6.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 4 Blog Iteration",
            "content": "while loops loops until the boolean inside is false, which stops the while loop from continuing . int x = 5; while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . the loop keeps looping if the condition inside of is true . for(int i=0;i&lt;5;i++) { System.out.println(i); } . 0 1 2 3 4 . can use for loops on strings to iterate through . String name = &quot;abcdef&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . ab cd ef . while loop versus do while loop . while loops are loos that keep continuing until a boolean isn&#39;t met anymore | do while loops are the same as while loops except for the loop checking for the conditions after checking a statement | . for loop, enhanced loop . enhanced for loops are easier to use and errors will usually happen less, as you don&#39;t have to manage steps by themselves, but for loops allows you to control everything about looping | for loops you can change by how many steps it iterates and if it goes backwards or forwards | enhanced for loops will just go forward and increment its steps by 1 | . public class Main { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } Main.main(null); . 2 10 5 12 . a nested loop is a loop inside of another loop | . class Main { public static void main(String[] args) { int weeks = 3; int days = 7; for (int i = 1; i &lt;= weeks; ++i) { System.out.println(&quot;Week: &quot; + i); for (int j = 1; j &lt;= days; ++j) { System.out.println(&quot; Day: &quot; + j); } } } } Main.main(null); . Week: 1 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 2 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 3 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 . HW . public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; ArrayList&lt;String&gt; caesar = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; letters.length; i++) { int d = 0; if (i &lt; 23) { caesar.add(letters[i+3]); } else { caesar.add(letters[i+3-26]); } } String message11 = &quot; &quot;; for (char c : message1.toCharArray()) { message11 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } String message22 = &quot; &quot;; for (char c : message2.toCharArray()) { message22 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } String message33 = &quot; &quot;; for (char c : message3.toCharArray()) { message33 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } System.out.println(caesar); System.out.println(message11); System.out.println(message22); System.out.println(message33); } } CaesarCipher.main(null); . [d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c] NiceWjobX codeWcodeWcode supercalifragilisticexpialidocious .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/11/30/u4-blog.html",
            "relUrl": "/fastpages/cb/2022/11/30/u4-blog.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 Blog Booleans",
            "content": "if statements are conditionals that if the conditional is true, then the code inside the if statement is ran. . if(true) { System.out.print(&quot;true&quot;); } . true . if else statements are like if statements, just with another block of code that executes if the if conditional is not met . if(false) { System.out.print(&quot;true&quot;); } else { System.out.print(&quot;false&quot;); } . false . else if statements are just adding more if conditionals, so if those are met, they execute . String name = &quot;samuel&quot;; if(name==&quot;Samuel&quot;) { System.out.print(&quot;SAMUEL&quot;); } else if(name==&quot;samuel&quot;) { System.out.print(&quot;samuel&quot;); } else { System.out.print(&quot;neither&quot;); } . samuel . switch statements are like else if statements, just replaced with case instead . int num = 2; switch (num) { case 1: System.out.print(&quot;1&quot;); break; case 2: System.out.print(&quot;2&quot;); break; default: System.out.print(&quot;neither&quot;); } . 2 . many booleans can be used in if else statements to make the conditional . if (2==2){ System.out.println(&quot;true&quot;); } if (2!=3){ System.out.println(&quot;true&quot;); } if (2&lt;3){ System.out.println(&quot;true&quot;); } if (2&lt;=2){ System.out.println(&quot;true&quot;); } . true true true true . De morgan&#39;s Law . De morgan&#39;s law uses not (!) and shows what happens when using multiple operators with this | the complement of the union of two sets A and B is equal to the intersection of the complement of the sets A and B | !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . if (!(true &amp;&amp; false) == ((!true)||(!false))) { System.out.print(&quot;these statements are equivalent&quot;); } else { System.out.print(&quot;not the same&quot;); } . these statements are equivalent . Compound Boolean Expression . this includes using the &amp;&amp;, ||, and ! operators, | . public class TestNum { public static void main(String[] args) { int score = 10; if (score &lt; 0 || score &gt; 100) { System.out.println(&quot;Score has an illegal value.&quot;); } if (score &gt;= 0 &amp;&amp; score &lt;= 100) { System.out.println(&quot;Score is in the range 0-100&quot;); } if (score != 10) { System.out.println(&quot;pick a different score&quot;); } } } TestNum.main(null) . Score is in the range 0-100 . Truth Tables . define boolean function by choosing value for each possible value of arguments, use truth table to do so | . . hw . . FRQ . a) . public static int numberOfLeapYears(int year1, int year2) { int cnt = 0; for (int y=year1; y&lt;=year2; y++) { if (isLeapYear(y)) { cnt++; } } return cnt; } . b) . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int doy = dayOfYear(month, day, year); return (firstDay + doy - 1) % 7; } . Conditional Exercises . 2 . public class main { public static void main(String[] Strings) { double a = 1; double b = 3; double c = 2; double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } main.main(null) . The roots are -1.0 and -2.0 . 4 . public class main { public static void main(String[] Strings) { double a = 1; if (a &gt; 0.0) { System.out.println(&quot;positive number&quot;); } else { System.out.println(&quot;negative number&quot;); } } } main.main(null) . positive number . 6 . public class main { public static void main(String[] Strings) { double a = 55.1321; double b = 55.132; a = Math.round(a * 1000); b = Math.round(b * 1000); if (a == b) { System.out.println(&quot;same&quot;); } else { System.out.println(&quot;different&quot;); } } } main.main(null) . same . 8 . public class main { public static void main(String[] Strings) { String a = &quot;a&quot;; boolean vowels = a.equals(&quot;a&quot;) || a.equals(&quot;e&quot;) || a.equals(&quot;i&quot;) || a.equals(&quot;o&quot;) || a.equals(&quot;u&quot;); if (a.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (vowels) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } } } main.main(null) . vowel . 10 . public class main { public static void main(String[] args) { int i; for (i=1;i&lt;=10;i++) { System.out.println (i); } } } main.main(null) . 1 2 3 4 5 6 7 8 9 10 . 12 . public class main { public static void main(String[] args) { int a = 3; int b = 4; int c = 1; int d = 7; int e = 3; double sum = a + b + c + d + e; double avg = sum/5; System.out.println(sum); System.out.println(avg); } } main.main(null) . 18.0 3.6 . 14 . public class main { public static void main(String[] args) { int a = 4; int b = 3; int i; for(i = 0; i &lt;= b; i++) { int c = a * i; System.out.println(a + &quot; * &quot; + i + &quot; = &quot; + c); c = 0; } } } main.main(null) . 4 * 0 = 0 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 . 16 . public class main { public static void main(String[] args) { int a; int b; int r = 5; for(a=1;a&lt;=r;a++) { for(b=1;b&lt;=a;b++) System.out.print(b); System.out.println(&quot;&quot;); } } } main.main(null); . 1 12 123 1234 12345 . 18 . public class main { public static void main(String[] args) { int a,b,c=1; int n = 4; for(a=1;a&lt;=n;a++) { for(b=1;b&lt;=a;b++) System.out.print(c++); System.out.println(&quot; &quot;); } } } main.main(null); . 1 23 456 78910 . 20 . public class main { public static void main(String[] args) { int a,b,c=1; int n = 5; for(a=1;a&lt;=n;a++) { for(b=1;b&lt;=a;b++) System.out.print(&quot; &quot; + c++); System.out.println(&quot; &quot;); } } } main.main(null); . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . String[] names = new String[] {&quot;samuel&quot;, &quot;kian&quot;, &quot;samuel&quot;, &quot;bob&quot;}; for(int i = 0; i &lt; names.length; i++ ) { for(int j = 0; j &lt; names.length; j++) { if(names[i]==names[j]) { System.out.println(names[j]); } } } . samuel samuel kian samuel samuel bob .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/11/28/u3-boolean-blog.html",
            "relUrl": "/fastpages/cb/2022/11/28/u3-boolean-blog.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 1 Blog Primitives",
            "content": "Why Java . Java syntax easier compared to other languages | focuses on classes, objects, and methods | easy connection with APIs | once compiled, it will run on any machine | . Anatomy . main.java is run by the java compiler | classname.java are names for the java files, public allows being called from other classes | {} is the stuff inside the class, static means that instance of main class isn&#39;t needed, void doesn&#39;t return to another function | . Primitive Data Types . int: integer number | double: decimal number up to 15 decimal places | boolean: true or false | . Variables . to initialize variable: (scope) dataType variableName = dataValue | private only allowed in a class | public any class can access | protected allowed to all classes in package and any subclass | variables known as constants don&#39;t change | . Basic Math . equal sign is assignment operator, can be used to change the value of the variable | modulo operator is % (a % b, which is integer remainder of a divided by b) | . Compound Assignment Operators . operators to change numbers (ie: integer += 1;) | *=,+=,-=,/=,%=,i++,i-- | . Vocab . Casting, specifically for Division . Change a variable’s type, so for example changing an int to a double or vice versa | . Casting, specifically for Truncating or Rounding . Truncate by changing a double to an int, this removes everything after the decimal | A trick to round with casting is to change a double to an int, but before doing this, add .5 if a positive integer and subtract .5 if a negative integer | . int num1 = 50; int num2 = 56; double round; double intaverage = num1 / num2; double doubaverage = (double)num1 / num2; System.out.println(&quot;dividing with integer(also truncating): &quot; + intaverage); System.out.println(&quot;dividing with double: &quot; + doubaverage); . dividing with integer(also truncating): 0.0 dividing with double: 0.8928571428571429 . Constructor - A constructor initializes an object, a constructor has no return value because it is not actually used by the code, instead it simply initializes the object. . public class Customer { //Intializing class Customer in this case with a constructor - no return value . Accessor methods - AKA “getters”, return the values in a defined class/reads the value, it is usually named get + Class Name . public String getName(){ return name; }; . Wrapper Classes, why wrap int, double. Show examples . Wrapper classes allow converting primitives into objects and vice versa, which allows java to be object oriented, as primitives aren’t an object by default | Someone may use a wrapper class on int to convert it to an object as they contain many methods to deal with an int value like converting it to a string representation, this is the same for doubles | . Concatenation . Concatenation is combining 2+ strings to make a string using either the + or += operator or the concat() method | concat() is immutable, so you need to set it to a string so a.concat() wouldn&#39;t work, but a = a.concat() would | to concatenate multiple data types, you need to use + and not concat method, os this would allow concating a string and a integer for example | . public class Main{ public static void main(String args[]){ int a=20; Integer i=Integer.valueOf(a);//converting int into Integer String string = i.toString(); //converting the Integer to a string, this doesn&#39;t work with the primitive String string1 = &quot; 2&quot;; String string2 = string.concat(string1); //using concat String otherdata = string+a; System.out.println(a+&quot; &quot;+i); System.out.println(&quot;concat 20 and 2 together: &quot; +&quot; &quot; +string2); System.out.println(&quot;concat a string and integer: &quot; +&quot; &quot; +otherdata); }} Main.main(null); . 20 20 concat 20 and 2 together: 20 2 concat a string and integer: 2020 . public class Example { public static void main(String[] args) { System.out.print(&quot;Hello World&quot;); System.out.print(&quot; From Team Oops!&quot;); System.out.println(); //done to separate two different lines System.out.println(&quot;Welcome to our presentation!&quot;); System.out.print(&quot;We hope you learn something from it!&quot;); } } Example.main(null); . Hello World From Team Oops! Welcome to our presentation! We hope you learn something from it! . Comparing Numbers . can compare numbers using the equals method | can compare numbers using compare method | operators such as &lt;, &gt;, == can be used | . Integer x = 0; Integer y = 0; if(x.equals(y)) { System.out.println(&quot;Both x and y are equal&quot;); } else { System.out.println(&quot;x and y are not equal&quot;); } int comp = Integer.compare(x, y); if(comp&gt;0) { System.out.println(&quot;x is greater than y&quot;); }else if (comp&lt;0){ System.out.println(&quot;x is less than y&quot;); }else{ System.out.println(&quot;x and y are equal&quot;); } . Both x and y are equal x and y are equal . Comparing Strings . can use equals method to compare two strings based on content in string | equalsIgnoreCase method compares two strings no matter the case | . String string = &quot;Sdsad&quot;; String string1 = &quot;sdsad&quot;; System.out.println(string.equals(string1)); System.out.println(string.equalsIgnoreCase(string1)); . false true . Big O notation for Hash map, Binary Search, Single loop, Nested Loop Good for determining time efficiency in a Java code, good for reducing and improving time. . Math Class . java math class provides many math methods that allow finding different things, such as a max or min function | math.random will return a number between 0.0 and 1.0, or you can multiply it to get 1 to 100 (seen in code) | . for (int i = 0; i &lt;5; i++) { int randomNum = (int)(Math.random() * 101); System.out.println(randomNum); } . 82 99 73 76 5 . Hack 1.1 . Print your name and your team name in separate lines! . public class Printing { public static void main(String[] args) { System.out.println(&quot;Samuel&quot;); System.out.println(&quot;Team 10&quot;); //simple printing } } Printing.main(null); . Samuel Team 10 . public class Example { public static void main(String[] args) { int Herbo = 10; double gasPrices = 7.99; final boolean Hot = true; String name = &quot;Team Oops is hot:&quot;; System.out.println(Herbo); System.out.println(gasPrices); System.out.println(name + Hot); // Hot = false; cannot assign a value to final variable Hot } } Example.main(null); . 10 7.99 Team Oops is hot:true . Hack 1.2 . Create variables for your biodata (name, age, underclassmen or not, height in feet) . public class Biodata { public static void main(String[] args) { String name = &quot;Samuel&quot;; int age = 17; boolean underclassman = false; //making variables and printing them int height = 6; System.out.println(name); System.out.println(age); System.out.println(underclassman); System.out.println(height); } } Biodata.main(null); . Samuel 17 false 6 . public class Math { public static void main(String[] args) { int number = 2; int number2 = 5; double number3 = 2.0; double number4 = 5.0; System.out.println(number+number2); System.out.println(number3+number4); System.out.println(number-number2); System.out.println(number3-number4); System.out.println(number * number2); System.out.println(number3 * number4); System.out.println(number/number2); System.out.println(number3/number4); System.out.println(number4 % number3); System.out.println(number2 % number); } } Math.main(null); . 7 7.0 -3 -3.0 10 10.0 0 0.4 1.0 1 . Hack 1.3 . Compute the remainder of 6 multiplied by 1234124 divided by 11345 minus 890809 plus 90800 (use order of operations) is divided by 980098, and store this in a variable called num (get an exact number as opposed to a whole number) | Divide num by 100 | Print num | . public class Num { public static void main(String[] args) { Double num = (((6.0*1234124.0)/(11345.0-890809.0+90800.0))%980098.0); //the math function, using parentheses to make sure pemdas works well num = num/100; System.out.println(num); } } Num.main(null); . -0.09388971729405679 . Hack 1.4 . Create a code which performs mathmatical calculations with assignment operators! | . public class Operators { public static void main(String[] args) { double n = 1; double b = 2; System.out.println(n+=b); // a bunch of diferent math functions System.out.println(n-=b); System.out.println(n*=b); System.out.println(n/=b); System.out.println(n%=b); System.out.println(n++); System.out.println(n--); } } Operators.main(null); . 3.0 1.0 2.0 1.0 1.0 1.0 2.0 . public class Cast { public static void main(String[] args) { double num = 10.5; int num2 = 100; int numInt = (int)num; double num2Double = (double)num2; System.out.println(num); System.out.println(num2); System.out.println(numInt); System.out.println(num2Double); System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); } } Cast.main(null); . 10.5 100 10 100.0 2147483647 -2147483648 . Hack 1.5 . Convert 123456.123456 into an integer | Set 678901234567890 into an integer (what do you think will happen?) | . public class CastActivity { public static void main(String[] args) { double data = 123456.123456; int value = (int)data; //using casting to truncate System.out.println(value); // int num = 678901234567890; // System.out.println(num); this turns out to be an error } } CastActivity.main(null); . 123456 . Code Example! . public class Main { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = sc.next(); //string System.out.println(name); System.out.println(&quot;How many pizzas do you want to buy?&quot;); int pizzas = sc.nextInt(); //integer System.out.println(pizzas); System.out.println(&quot;Do you have the discount (true/false)?&quot;); boolean hasDiscount = sc.nextBoolean(); //boolean System.out.println(hasDiscount); double price; //double, defaults to 0 if (hasDiscount) { price = 1.20; } else { price = 2.10; } char firstChar = name.charAt(0); //character double finalPrice = price * pizzas * 1.08; // adding taxes System.out.println(&quot;Hi &quot; + firstChar + &quot;! You have to pay &quot; + (finalPrice) + &quot; dollars.&quot;); } } Main.main(null); . What is your name? Kinish How many pizzas do you want to buy? 6 Do you have the discount (true/false)? true Hi K! You have to pay 7.776 dollars. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/11/25/primitive-hacks.html",
            "relUrl": "/fastpages/cb/2022/11/25/primitive-hacks.html",
            "date": " • Nov 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "FRQ 1",
            "content": "Double number = 53466; Double firstDigit = Double.parseInt(Double.toString(number).substring(2, 4)); System.out.prDouble(firstDigit); . 46 . Double year = 1911.0; Double century = Double.parseDouble(Double.toString(year).substring(0, 2)); System.out.println(C); Double year2 = Double.parseDouble(Double.toString(year).substring(2, 4)); year2 = year2 - 1; System.out.println(year2); Double dayofweek = (1 + ((2.6*11)-0.2)-(2 * century) + year2 + (year2/4) + (century/4)) % 7; System.out.print(dayofweek) . 19.0 10.0 1.6500000000000021 . import java.util.Calendar; public class main { public static void main(String[] args) { int year = 2019; Calendar calobj = Calendar.getInstance(); calobj.add(Calendar.YEAR, year); calobj.add(Calendar.MONTH, 1); calobj.add(Calendar.DAY_OF_WEEK, 1); System.out.println(calobj.getFirstDayOfWeek()); } } main.main(null); . 1 . import java.util.Calendar; public class JavaCalendargetFirstDayOfWeekExample1 { public static void main(String[] args) { Calendar calenobj = Calendar.getInstance(); calenobj.add(Calendar.YEAR, 2021); calenobj.add(Calendar.MONTH, 1); calenobj.add(Calendar.DAY_OF_WEEK, 1); // Map&lt;String, String&gt; days2 = new HashMap&lt;String, String&gt;(); Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;(){{ put(&quot;Sun&quot;,0); put(&quot;Mon&quot;,1); put(&quot;Tue&quot;,2); put(&quot;Wed&quot;,3); put(&quot;Thu&quot;,4); put(&quot;Fri&quot;,5); put(&quot;Sat&quot;,6); }}; String day = (calenobj.getTime()).toString(); System.out.println(day); String days = day.substring(0,3); System.out.println(map.get(days)); } } JavaCalendargetFirstDayOfWeekExample1.main(null); . Fri Dec 18 10:45:58 PST 4043 5 . Map&lt;String, String&gt; days = new HashMap&lt;String, String&gt;(); Map&lt;String, String&gt; days = Map.of(&quot;Sun&quot;, &quot;0&quot;, &quot;Mon&quot;, &quot;1&quot;, &quot;Tue&quot;, &quot;2&quot;,&quot;Wed&quot;,&quot;3&quot;,&quot;Thu&quot;,&quot;4&quot;,&quot;Fri&quot;,&quot;5&quot;,&quot;Sat&quot;,&quot;6&quot;); System.out.println(map.get(&quot;dog&quot;)); . Double cg = 93.0; Double tp = 30.0; Double tg = 90.0; Double tpt = 100.0; Double fp = 50.0; Double dg = 90.0; Double otherPoint = cg - (tg*(tp/100)); Double needed = (((dg - otherPoint) * (tpt+fp))/tp)-tg; System.out.print(needed); . 30.0 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/11/14/FRQ1.html",
            "relUrl": "/fastpages/cb/2022/11/14/FRQ1.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "frontend api update",
            "content": "World Population: world population . .",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/11/06/api-update.html",
            "relUrl": "/markdown/2022/11/06/api-update.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "test corrections HW",
            "content": "Score . . Question 2 . . The correct answer is A, as the getA method in SomeClass takes int, and to get this method, obj.getA() is used. I just misread it and thought I was choosing the one that had the method, but accidentally chose myA instead. . q4 . . This one I just got messed up with integers and doubles. I misread it and didn&#39;t pay attention enough to realize that x and y were integers. C is the correct answer as the first output will be skipped and the else will be done. They are integers, so it will round down to 2. . q15 . . The answer is A, where 1 is the answer. I chose 1 and 2, and 2 is wrong because it leads to arrayindexoutofboundsexception and I didn&#39;t notice this. . q19 . . I incorrectly remembered how De Morgan&#39;s Law worked. The answer was b and not d because the &quot;and&quot; has to be switched to an &quot;or&quot;. . q21 . . I just read the question wrong for this one. The answer is D, as it finds the positive difference between num and val and checks that is less than minDiff. . q22 . . I thought line 5 wouldn&#39;t compile, as I though that the AudioBook object couldn&#39;t call toString. The answer is B is because you would have to let compiler know that the object in books is AudioBook. . q24 . . I just didn&#39;t really understand 2d arrays well. D is the correct answer as once the loop ends, new Array will have {1,4,7}, {2,5,8}, {3,6,9}, which means the value will be 7. . q28 . . I got my math mixed up for this one. The answer is E because the while loop only keeps looping when n is larger than 2, so it will always be greater than 2. . q34 . . I chose choice 3, but x and y are private instances so they can&#39;t be accessed straight by circle. B is correct as 2 uses its parameters of a and b to be assigned to x and y respectively. . q35 . . The answer is E as the code segment iterates 4 times to get to the value of 4752. Here, num is 0 and the loop will stop. I got quite confused with the math on this one and it was really difficult to do mentally. . q39 . . I didn&#39;t get to the final recur value, I only got to recur(9). The answer is D as the answer will be recur(recur(9)). The answer is finally 16. So, I didn&#39;t get far enough. . Reflection . I struggled mostly on the math parts and keeping track of the numbers. For example, a lot of the iteration ones the math can get kind of confusing when doing mentally. I&#39;m not sure if we get a paper or not on the actual ap test, but if we don&#39;t it could get kind of tricky. I also didn&#39;t fully understand some concepts like 2d arrays and nested for loops. There were also some things I ended up just misreading and getting wrong .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/hw/2022/11/03/test-corrections.html",
            "relUrl": "/fastpages/cb/hw/2022/11/03/test-corrections.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2 Blog Objects",
            "content": "Instances of Classes . java is object-oriented programming, java is about manipulating objects | objects are a reference type, when referring to it, you are referring to where it is stored | an object is an instance of a class | . Constructors . to make object, call constructor, will initialize the object and make characteristics | Class object = new Class(); | . Constructor Overloading . one class can have multiple constructors, the different constructors need to have diff numbers of parameters or different order of variables, each constructor will make objects with same types of characteristics, but are created differently | parameters missing are given default parameters instead | . Null Objects . object can be made null , makes it so no object exists for that | . Void Methods vs. Non-Void Methods . void methods don&#39;t return value, change characteristics of object or prints text | static methods belong to a class, not tied to an object | . static v non-static . dot notation to use static, classname.method() | non-static on a particular object, objectname.method() | . write/call methods with parameters . parameters in the parentheses, | to call method, plug values in place of variables | . Non-void method . use method as part of expression/stored as variable | dataType variableName = methodName(parameterListOptional); | . Strings . string literals are objects | escape characters print a character or empty space | combine strings with concatenation, used through + operator | . Vocab . Overloading a method, same name different parameters . When you use the same method name in a class each with different parameters. . Overriding a method, same signature of a method . When a subclass has the same name and parameters as the parent class . Late binding of object . Late binding is when the compiler runs the object and is created then and there . Polymorphism: any of overloading, overriding, late binding . Multiple methods with the same name but different parameters . Comparing Objects . import java.io.*; class Pet { String name; int age; String breed; Pet(String name, int age, String breed) { this.name = name; this.age = age; this.breed = breed; } } public class Main { public static void main(String args[]) { Pet dog1 = new Pet(&quot;Snow&quot;, 3, &quot;German Shepherd&quot;); //late binding Pet cat = new Pet(&quot;Jack&quot;, 2, &quot;Tabby&quot;); //overriding method different Pet dog2 = new Pet(&quot;Snow&quot;, 3, &quot;German Shepherd&quot;); //overriding method same System.out.println(dog1.equals(dog2)); } } Main.main(null); . false . equals and hashCode methods can be used to compare objects | equals method compares equality of two objects | . Standard methods: toString(), equals(), hashCode() . toString() method returns a string representation of a class | equals() compares two strings | hashCode() returns the integer value that is associated with all values in Java(aka the hash code) | . Abstract Class, Abstract Method . This class’s objects and methods can be referenced, however the class itself is not initialized. . . FRQs . a) . public int scoreGuess( String guess ) { int val = 0; int len = guess.length(); for( int i = 0; i &lt;= secret.length()-len; i+=1) { String ck = secret.substring( i, i+len ); if( ck.equals(guess) ) val++; } return val*len*len; } . b) . public String findBetterGuess(String guess1, String guess2 ) { int a = scoreGuess( guess1 ); int b = scoreGuess( guess2 ); if( a &gt; b ) return guess1; if( b &gt; a ) return guess2; if( guess1.compareTo( guess2 ) &gt; 0 ) return guess1; return guess2; } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/23/objects-hw.html",
            "relUrl": "/fastpages/pbl/2022/10/23/objects-hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Iteration HW",
            "content": "public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; ArrayList&lt;String&gt; caesar = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; letters.length; i++) { int d = 0; if (i &lt; 23) { caesar.add(letters[i+3]); } else { caesar.add(letters[i+3-26]); } } String message11 = &quot; &quot;; for (char c : message1.toCharArray()) { message11 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } String message22 = &quot; &quot;; for (char c : message2.toCharArray()) { message22 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } String message33 = &quot; &quot;; for (char c : message3.toCharArray()) { message33 += Character.toString((char) (((c - &#39;a&#39; + 3) % 26) + &#39;a&#39;)); } System.out.println(caesar); System.out.println(message11); System.out.println(message22); System.out.println(message33); } } CaesarCipher.main(null); . [d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c] NiceWjobX codeWcodeWcode supercalifragilisticexpialidocious .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/22/iteration-lesson.html",
            "relUrl": "/fastpages/pbl/2022/10/22/iteration-lesson.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "boolean HW",
            "content": ". FRQ . a) . public static int numberOfLeapYears(int year1, int year2) { int cnt = 0; for (int y=year1; y&lt;=year2; y++) { if (isLeapYear(y)) { cnt++; } } return cnt; } . b) . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int doy = dayOfYear(month, day, year); return (firstDay + doy - 1) % 7; } . Conditional Exercises . 2 . public class main { public static void main(String[] Strings) { double a = 1; double b = 3; double c = 2; double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } main.main(null) . The roots are -1.0 and -2.0 . 4 . public class main { public static void main(String[] Strings) { double a = 1; if (a &gt; 0.0) { System.out.println(&quot;positive number&quot;); } else { System.out.println(&quot;negative number&quot;); } } } main.main(null) . positive number . 6 . public class main { public static void main(String[] Strings) { double a = 55.1321; double b = 55.132; a = Math.round(a * 1000); b = Math.round(b * 1000); if (a == b) { System.out.println(&quot;same&quot;); } else { System.out.println(&quot;different&quot;); } } } main.main(null) . same . 8 . public class main { public static void main(String[] Strings) { String a = &quot;a&quot;; boolean vowels = a.equals(&quot;a&quot;) || a.equals(&quot;e&quot;) || a.equals(&quot;i&quot;) || a.equals(&quot;o&quot;) || a.equals(&quot;u&quot;); if (a.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (vowels) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } } } main.main(null) . vowel . 10 . public class main { public static void main(String[] args) { int i; for (i=1;i&lt;=10;i++) { System.out.println (i); } } } main.main(null) . 1 2 3 4 5 6 7 8 9 10 . 12 . public class main { public static void main(String[] args) { int a = 3; int b = 4; int c = 1; int d = 7; int e = 3; double sum = a + b + c + d + e; double avg = sum/5; System.out.println(sum); System.out.println(avg); } } main.main(null) . 18.0 3.6 . 14 . public class main { public static void main(String[] args) { int a = 4; int b = 3; int i; for(i = 0; i &lt;= b; i++) { int c = a * i; System.out.println(a + &quot; * &quot; + i + &quot; = &quot; + c); c = 0; } } } main.main(null) . 4 * 0 = 0 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 . 16 . public class main { public static void main(String[] args) { int a; int b; int r = 5; for(a=1;a&lt;=r;a++) { for(b=1;b&lt;=a;b++) System.out.print(b); System.out.println(&quot;&quot;); } } } main.main(null); . 1 12 123 1234 12345 . 18 . public class main { public static void main(String[] args) { int a,b,c=1; int n = 4; for(a=1;a&lt;=n;a++) { for(b=1;b&lt;=a;b++) System.out.print(c++); System.out.println(&quot; &quot;); } } } main.main(null); . 1 23 456 78910 . 20 . public class main { public static void main(String[] args) { int a,b,c=1; int n = 5; for(a=1;a&lt;=n;a++) { for(b=1;b&lt;=a;b++) System.out.print(&quot; &quot; + c++); System.out.println(&quot; &quot;); } } } main.main(null); . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . String[] names = new String[] {&quot;samuel&quot;, &quot;kian&quot;, &quot;samuel&quot;, &quot;bob&quot;}; for(int i = 0; i &lt; names.length; i++ ) { for(int j = 0; j &lt; names.length; j++) { if(names[i]==names[j]) { System.out.println(names[j]); } } } . samuel samuel kian samuel samuel bob .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/22/conditionals.html",
            "relUrl": "/fastpages/pbl/2022/10/22/conditionals.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 5 Blog Classes",
            "content": "classes are used to make objects and they have instance variables, constructors, methods, accessors/getters, mutators/setters, tester, objects . methods . methods can tell what an object to do . public static void main​(String[] args){ } . access modifiers . public, can be accessed outside the class | private can only be called in the class | . Constructors . initialize instance variable, set initial state of object by setting initial values | A constructor initializes an object, a constructor has no return value because it is not actually used by the code, instead it simply initializes the object. | . public class Main { int x; public Main() { // constructor x = 5; } public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Main.main(null) . 5 . Accessor Method . lets objects outside of class get values of instance variables/ static variables | has return type of string, int, long | . public String getVariable(){ } . Mutator Method . void method that changes value of instance/static variable, don&#39;t return value | modify instance variables | . this Keyword . “This” refers to an object within a constructor, used in setters to set variables/parameters. . public class CheckingAccount{ private int balance; public void setBalance(int newBalance){ this.balance = newBalance; } } . Creating a Class . a class is an object constructor or something used to make objects | use the keyword class to create a class | classes can have more than one class, which is called a nested class | for the outside class, only public, abstract, strictfp, and final can be used to modify class, but inside, private, protected, and static can be used | . Static variables, Class variables . Static variables/Class variables are variables once declared and initialized becoming a global variable, used for the runtime of the entire program. You cannot change them . main method, tester methods . Main/tester method is used to test a class with a specific input to validate its working efficiency. . public class Employee { private static double salary; //static variable public static final String DEPARTMENT = &quot;Development &quot;; public static void main(String args[]) { //main method salary = 1000; System.out.println(DEPARTMENT + &quot;average salary:&quot; + salary); } } Employee.main(null); . Development average salary:1000.0 . Inheritance, extends . Inheritance/extends takes aspects of an existing class and replicates it within another class using the extends method, simplifying code by a lot. . class Vehicle { protected String brand = &quot;Ford&quot;; public void honk() { System.out.println(&quot;car&quot;); } } class Car extends Vehicle { //extends vehicle class private String modelName = &quot;Mustang&quot;; public static void main(String[] args) { Car myCar = new Car(); myCar.honk(); System.out.println(myCar.brand + &quot; &quot; + myCar.modelName); } } Car.main(null); . car Ford Mustang . Subclass constructor, super Keyword . A subclass constructor forms after extending a previous class, and using the super(); method will take a method and replicate it in the new class. . class Animal { public void animalSound() { System.out.println(&quot;dog&quot;); } } class Dog extends Animal { public void animalSound() { super.animalSound(); // Calls superclass method System.out.println(&quot;cat&quot;); } } public class Main { public static void main(String args[]) { Animal myDog = new Dog(); myDog.animalSound(); } } Main.main(null); . dog cat . access modifiers . Public access modifiers are accessible from anywhere in any class or program in Java, no restrictions | Protected classes are used when you want to access the class within the package, subclasses. Can use extends to it to access. | Private access modifiers are the least accessible; only accessible within the class itself. | . private . class A { private void display() { System.out.println(&quot;text&quot;); } } class B { public static void main(String args[]) { A obj = new A(); obj.display(); } } B.main(null); . | obj.display(); display() has private access in A . protected . public class A { protected void display() { System.out.println(&quot;text&quot;); } } class B extends A { public static void main(String args[]) { B obj = new B(); obj.display(); } } B.main(null); . text . public . public class A { public void display() { System.out.println(&quot;text&quot;); } } class B { public static void main(String args[]) { A obj = new A(); obj.display(); } } B.main(null); . text . HW . public class StepTracker { private int days; private int activeDays; private int totalSteps; private int minActive; public StepTracker(int m) { minActive = m; days = 0; activeDays = 0; totalSteps = 0; } public int activeDays() { return activeDays; } public double averageSteps() { if (days == 0) { return 0.0; } return (double) totalSteps / days; } public void addDailySteps(int steps) { days++; totalSteps += steps; if (steps &gt;= minActive) { activeDays++; } } } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/22/classes.html",
            "relUrl": "/fastpages/pbl/2022/10/22/classes.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Boolean HW",
            "content": "public class Main { public static void main(String[] Strings) { int a = 1 int b = 2 int c = 3 } } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/hw/2022/10/18/boolean-hw.html",
            "relUrl": "/fastpages/cb/hw/2022/10/18/boolean-hw.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Primitives and Objects Blog",
            "content": "Primitives . Why Java . Java syntax easier compared to other languages | focuses on classes, objects, and methods | easy connection with APIs | once compiled, it will run on any machine | . Anatomy . main.java is run by the java compiler | classname.java are names for the java files, public allows being called from other classes | {} is the stuff inside the class, static means that instance of main class isn’t needed, void doesn’t return to another function | . Primitive Data Types . int: integer number | double: decimal number up to 15 decimal places | boolean: true or false | . Variables . to initialize variable: (scope) dataType variableName = dataValue | private only allowed in a class | public any class can access | protected allowed to all classes in package and any subclass | variables known as constants don’t change | . Basic Math . equal sign is assignment operator, can be used to change the value of the variable | modulo operator is % (a % b, which is integer remainder of a divided by b) | . Compound Assignment Operators . operators to change numbers (ie: integer += 1;) | *=,+=,-=,/=,%=,i++,i– | . Objects . Instances of Classes . java is object-oriented programming, java is about manipulating objects | objects are a reference type, when referring to it, you are referring to where it is stored | an object is an instance of a class | . Constructors . to make object, call constructor, will initialize the object and make characteristics | Class object = new Class(); | . Constructor Overloading . one class can have multiple constructors, the different constructors need to have diff numbers of parameters or different order of variables, each constructor will make objects with same types of characteristics, but are created differently | parameters missing are given default parameters instead | . Null Objects . object can be made null , makes it so no object exists for that | . Void Methods vs. Non-Void Methods . void methods don’t return value, change characteristics of object or prints text | static methods belong to a class, not tied to an object | . static v non-static . dot notation to use static, classname.method() | non-static on a particular object, objectname.method() | . write/call methods with parameters . parameters in the parentheses, | to call method, plug values in place of variables | . Non-void method . use method as part of expression/stored as variable | dataType variableName = methodName(parameterListOptional); | . Strings . string literals are objects | escape characters print a character or empty space | combine strings with concatenation, used through + operator | .",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/10/15/Primitives-Objects.html",
            "relUrl": "/markdown/2022/10/15/Primitives-Objects.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "POJO Notebook",
            "content": "import java.util.Objects; import javax.persistence.*; @Entity //get object ready for storage class Student { private @Id @GeneratedValue Long id; //making attributes private String name; private int period; Student() {} Student(String name, int period) { this.name = name; this.period = period; } public Long getId() { return this.id; } public String getName() { return this.name; } public String getRole() { return this.period; } public void setId(Long id) { this.id = id; } public void setName(String name) { this.name = name; } public void setRole(String period) { this.period = period; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Student)) return false; Student student = (Student) o; return Objects.equals(this.id, student.id) &amp;&amp; Objects.equals(this.name, student.name) &amp;&amp; Objects.equals(this.period, student.period); } @Override public int hashCode() { return Objects.hash(this.id, this.name, this.period); } @Override public String toString() { return &quot;Student{&quot; + &quot;id=&quot; + this.id + &quot;, name=&#39;&quot; + this.name + &#39; &#39;&#39; + &quot;, period=&#39;&quot; + this.period + &#39; &#39;&#39; + &#39;}&#39;; } } .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/09/POJO.html",
            "relUrl": "/fastpages/pbl/2022/10/09/POJO.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Array List Notebook",
            "content": "public class Main { public static void main(String args[]) { new ArrayList(); ArrayList&lt;String&gt; Students = new ArrayList&lt;String&gt;(); // main arraylist Students.add(&quot;Samuel&quot;); Students.add(&quot;Kian&quot;); System.out.println(&quot;Students List: &quot; + Students); ArrayList&lt;String&gt; Students2 = new ArrayList&lt;String&gt;(); //second arraylist to add to main arraylist Students2.add(&quot;Calissa&quot;); Students2.add(&quot;Evan&quot;); Students2.add(&quot;Mr Mortensen&quot;); Students.addAll(Students2); //adds elements from second array to main array System.out.println(&quot;Students List with students added from second array: &quot; + Students); System.out.println(&quot;Number of Students: &quot; + Students.size()); Students2.clear(); //clear an ArrayList System.out.println(&quot;Second array emptied: &quot; + Students2); System.out.println(&quot;The second array is empty: &quot; + Students2.isEmpty()); if (Students.contains(&quot;Mr Mortensen&quot;) == true) { Students.remove(&quot;Mr Mortensen&quot;); Collections.sort(Students); System.out.println(&quot;Mr. Mortensen removed and students sorted alphabetically: &quot; + Students); } else { Collections.sort(Students); System.out.println(&quot;Students sorted alphabetically: &quot; + Students); } System.out.println(&quot;2nd student from sorted list: &quot; + Students.get(2)); var b = Students.indexOf(&quot;Samuel&quot;); b++; System.out.println(&quot;Samuel is the &quot; + b + &quot;th person in the list&quot;); System.out.println(&quot;Amount of students: &quot; + Students.size()); System.out.println(&quot;Is bob part of the list: &quot; + Students.contains(&quot;bob&quot;)); System.out.println(&quot;Hashcode of list: &quot; + Students.hashCode()); } } Main.main(null) . Students List: [Samuel, Kian] Students List with students added from second array: [Samuel, Kian, Calissa, Evan, Mr Mortensen] Number of Students: 5 Second array emptied: [] The second array is empty: true Mr. Mortensen removed and students sorted alphabetically: [Calissa, Evan, Kian, Samuel] 2nd student from sorted list: Kian Samuel is the 4th person in the list Amount of students: 4 Is bob part of the list: false Hashcode of list: -2125894581 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/10/03/arraylist.html",
            "relUrl": "/fastpages/cb/2022/10/03/arraylist.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "API Notebook",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/msilverman/api/nutritionix-nutrition-database/ HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://burgers1.p.rapidapi.com/burgers&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;befd3aa94cmsh6c15f9448db64f3p194824jsn7727f7079e12&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;burgers1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [ { &#34;id&#34;: 0, &#34;name&#34;: &#34;Tribute Burger&#34;, &#34;restaurant&#34;: &#34;Honest Burgers&#34;, &#34;web&#34;: &#34;www.honestburgers.co.uk&#34;, &#34;description&#34;: &#34;A mouth-watering honest beef burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;75&#34;, &#34;line1&#34;: &#34;Venn Street&#34;, &#34;line2&#34;: &#34;Clapham&#34;, &#34;postcode&#34;: &#34;SW4 0BD&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pulled Mooshie&#34;, &#34;restaurant&#34;: &#34;Mooshies&#34;, &#34;web&#34;: &#34;www.veganburger.org&#34;, &#34;description&#34;: &#34;Spicy vegan burger with jackfruit&#34;, &#34;ingredients&#34;: [ &#34;jackfruit&#34;, &#34;coleslaw&#34;, &#34;gluten free bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;104&#34;, &#34;line1&#34;: &#34;Brick Lane&#34;, &#34;line2&#34;: &#34;Shoreditch&#34;, &#34;postcode&#34;: &#34;E1 6RL&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Krabby Patty&#34;, &#34;restaurant&#34;: &#34;Krusty Krab&#34;, &#34;web&#34;: &#34;https://twitter.com/SpongeBob&#34;, &#34;description&#34;: &#34;The only people who don&#39;t like a Krabby Patty have never tasted one.&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;patty&#34;, &#34;ketchup&#34;, &#34;mustard&#34;, &#34;pickles&#34;, &#34;onions&#34;, &#34;lettuce&#34;, &#34;cheese&#34;, &#34;tomato&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;831&#34;, &#34;line1&#34;: &#34;Bottom Feeder Lane&#34;, &#34;line2&#34;: &#34;&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;Bikini Bottom, Pacific Ocean&#34; } ] }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;The Good Burger&#34;, &#34;restaurant&#34;: &#34;Good Burger&#34;, &#34;web&#34;: &#34;https://en.wikipedia.org/wiki/Good_Burger&#34;, &#34;description&#34;: &#34;Welcome to Good Burger, home of the Good Burger, can I take your order?&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;tomato&#34;, &#34;Ed&#39;s secret sauce&#34;, &#34;lettuce&#34;, &#34;onions&#34;, &#34;cheese&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;000&#34;, &#34;line1&#34;: &#34;Good Burger&#34;, &#34;line2&#34;: &#34;437 Glendora Ave.&#34;, &#34;postcode&#34;: &#34;CA&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Crunchy Nacho Burger&#34;, &#34;restaurant&#34;: &#34;Max Burgers&#34;, &#34;web&#34;: &#34;https://www.max.se/maten/meny/burgare/crunchy-nacho-burger/&#34;, &#34;description&#34;: &#34;The best combination of crunchiness and softness, all in one single burger&#34;, &#34;ingredients&#34;: [ &#34;sesame bun&#34;, &#34;salsa&#34;, &#34;cheddar&#34;, &#34;nachos&#34;, &#34;beef&#34;, &#34;tomato&#34;, &#34;pickled onion&#34;, &#34;lettuce&#34;, &#34;jalapeño mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;48D&#34;, &#34;line1&#34;: &#34;Skeppsbrogatan&#34;, &#34;line2&#34;: &#34;Luleå&#34;, &#34;postcode&#34;: &#34;971 25&#34;, &#34;country&#34;: &#34;Sweden&#34; } ] }, { &#34;id&#34;: 5, &#34;name&#34;: &#34;Barbie Burger&#34;, &#34;restaurant&#34;: &#34;Flower Burger&#34;, &#34;web&#34;: &#34;https://www.flowerburger.it/&#34;, &#34;description&#34;: &#34;From a pink explosion was born Barbie Burger, a special edition in partnership with Mattel&#34;, &#34;ingredients&#34;: [ &#34;pink bun&#34;, &#34;lentil and beetroot burger&#34;, &#34;tomatoes&#34;, &#34;gentilina salad&#34;, &#34;barbie hummus&#34;, &#34;barbie mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;Porta Genova&#34;, &#34;line2&#34;: &#34;Via Tortona&#34;, &#34;postcode&#34;: &#34;20144&#34;, &#34;country&#34;: &#34;Italy&#34; } ] }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Curry On My Wayward Bun&#34;, &#34;restaurant&#34;: &#34;Bob&#39;s Burgers&#34;, &#34;web&#34;: &#34;https://bobs-burgers.fandom.com/wiki/Burger_of_the_Day&#34;, &#34;description&#34;: &#34;N/A&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;curry&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;0&#34;, &#34;line1&#34;: &#34;Ocean Avenue&#34;, &#34;line2&#34;: &#34;NJ&#34;, &#34;postcode&#34;: &#34;08260&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 7, &#34;name&#34;: &#34;MEISTER ALLER KLASSEN&#34;, &#34;restaurant&#34;: &#34;Burgermeister&#34;, &#34;web&#34;: &#34;https://burger-meister.de&#34;, &#34;description&#34;: &#34;Fast food joint located in a public toilet? Why on earth?!&#34;, &#34;ingredients&#34;: [ &#34;2 x meat&#34;, &#34;2 x cheese&#34;, &#34;bacon&#34;, &#34;barbequesauce&#34;, &#34;jalapenos&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;Potsdamer Platz&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10785&#34;, &#34;country&#34;: &#34;Germany&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;45&#34;, &#34;line1&#34;: &#34;Eberswalder, Schönhauser Allee&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10435&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 8, &#34;name&#34;: &#34;Vegetarian Burger (Indian Style)&#34;, &#34;restaurant&#34;: &#34;Indian Burgers&#34;, &#34;web&#34;: &#34;https://www.cookwithmanali.com/vegetarian-burger-indian-style/&#34;, &#34;description&#34;: &#34;With summer around the corner, I had to share a vegetarian burger recipe with you guys. Actually I plan to share more in the next month but I thought I will start with this Indian style Vegetarian Burger aka Masala Burger!&#34;, &#34;ingredients&#34;: [ &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;Veggies&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;007&#34;, &#34;line1&#34;: &#34;Line1&#34;, &#34;line2&#34;: &#34;Line2&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 9, &#34;name&#34;: &#34;Fat Santa&#34;, &#34;restaurant&#34;: &#34;Sky City Hamilton&#34;, &#34;web&#34;: &#34;https://skycityhamilton.co.nz/eat-drink/eat-burger/&#34;, &#34;description&#34;: &#34;A Christmas themed burger&#34;, &#34;ingredients&#34;: [ &#34;chicken thigh&#34;, &#34;champagne ham&#34;, &#34;sage and onion stuffing&#34;, &#34;gravy mash&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;cranberry sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;348&#34;, &#34;line1&#34;: &#34;Victoria street&#34;, &#34;line2&#34;: &#34;Hamilton Central, Hamilton&#34;, &#34;postcode&#34;: &#34;3204&#34;, &#34;country&#34;: &#34;New Zealand&#34; } ] }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Blondie&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Delicious steak burger&#34;, &#34;ingredients&#34;: [ &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;bacon&#34;, &#34;egg&#34;, &#34;cheese&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 11, &#34;name&#34;: &#34;Monster Burger&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Massive meaty burger - the size of a dinner plate&#34;, &#34;ingredients&#34;: [ &#34;250g patty&#34;, &#34;bacon&#34;, &#34;cheese&#34;, &#34;2 eggs&#34;, &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;Buffalo chicken burger&#34;, &#34;restaurant&#34;: &#34;Meat Mission&#34;, &#34;web&#34;: &#34;http://meatliquor.com/&#34;, &#34;description&#34;: &#34;Large, messy, super tasty buffalo chicken burger&#34;, &#34;ingredients&#34;: [ &#34;Fried chicken breast&#34;, &#34;House-made buffalo sauce&#34;, &#34;Lettuce&#34;, &#34;Red onions&#34;, &#34;Blue cheese sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;15&#34;, &#34;line1&#34;: &#34;Hoxton Market,&#34;, &#34;line2&#34;: &#34;Hackney, London&#34;, &#34;postcode&#34;: &#34;N1 6HG&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;Cheatday Burger&#34;, &#34;restaurant&#34;: &#34;Burgeramt&#34;, &#34;web&#34;: &#34;https://www.burgeramt.com/&#34;, &#34;description&#34;: &#34;Perfect when you need a day off from your workout routine&#34;, &#34;ingredients&#34;: [ &#34;double beef&#34;, &#34;chilli-cheese sauce&#34;, &#34;2 slices cheddar cheese&#34;, &#34;crispy bacon stripes&#34;, &#34;nachos&#34;, &#34;mayonnaise&#34;, &#34;mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;21 - 22&#34;, &#34;line1&#34;: &#34;Krossener Straße&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10245&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 14, &#34;name&#34;: &#34;The Truffler (vegan)&#34;, &#34;restaurant&#34;: &#34;Byron Burgers&#34;, &#34;web&#34;: &#34;https://www.byron.co.uk/&#34;, &#34;description&#34;: &#34;Beyond Meat patty, crispy onions, mushrooms, pickled red onions, lettuce American mustard, truffle ‘cheese’ fondue, truffle ‘mayo’&#34;, &#34;ingredients&#34;: [ &#34;1/4 Beyond Meat patty&#34;, &#34;crispy onions&#34;, &#34;sauteed mushrooms&#34;, &#34;pickled red onions&#34;, &#34;lettuce&#34;, &#34;American mustard&#34;, &#34;truffle vegan cheese fondue&#34;, &#34;truffle vegan mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;41-45&#34;, &#34;line1&#34;: &#34;The Cut&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;SE1 8LF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;The Loft&#34;, &#34;line1&#34;: &#34;Westfield Shopping Centre&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;W12 7GF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 15, &#34;name&#34;: &#34;Aloette Buger&#34;, &#34;restaurant&#34;: &#34;Aloette&#34;, &#34;web&#34;: &#34;https://aloetterestaurant.com/&#34;, &#34;description&#34;: &#34;Haute cuisine meets cravings for cheeseburgers.&#34;, &#34;ingredients&#34;: [ &#34;6oz beef patty, served medium&#34;, &#34;griddled beaufort cheese&#34;, &#34;cheddar mayo&#34;, &#34;shredded lettuce&#34;, &#34;potato roll&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;163&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2A5&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 16, &#34;name&#34;: &#34;BBQ Burger&#34;, &#34;restaurant&#34;: &#34;Fresh Plant Powered&#34;, &#34;web&#34;: &#34;https://freshplantpowered.com/&#34;, &#34;description&#34;: &#34;Vegan burger made from whole, natural ingredients.&#34;, &#34;ingredients&#34;: [ &#34;house-made grain burger&#34;, &#34;bbq sauce&#34;, &#34;quinoa onion rings&#34;, &#34;vegan garlic mayo&#34;, &#34;napa cabbage&#34;, &#34;banana chillies&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;147&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2L7&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;326&#34;, &#34;line1&#34;: &#34;Bloor Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5S 1W5&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;894&#34;, &#34;line1&#34;: &#34;Queen Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M6J 1G3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;90&#34;, &#34;line1&#34;: &#34;Eglinton Avenue East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M4P 2Y3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Front Street East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5E 1B3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;95&#34;, &#34;line1&#34;: &#34;Queen Elizabeth Blvd&#34;, &#34;line2&#34;: &#34;Etobicoke&#34;, &#34;postcode&#34;: &#34;M8Z 1P3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 6, &#34;number&#34;: &#34;8768&#34;, &#34;line1&#34;: &#34;Sunset Blvd&#34;, &#34;line2&#34;: &#34;Los Angeles&#34;, &#34;postcode&#34;: &#34;90069&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 17, &#34;name&#34;: &#34;Carroll&#39;s Cheese Burger&#34;, &#34;restaurant&#34;: &#34;Carroll&#39;s Pub Worms&#34;, &#34;web&#34;: &#34;https://www.carrolls-pub-worms.de/&#34;, &#34;description&#34;: &#34;Tasty black angus beef burger.&#34;, &#34;ingredients&#34;: [ &#34;Irish black angus beef&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;caramelized onions&#34;, &#34;pickles&#34;, &#34;cheddar cheese&#34;, &#34;tomato relish&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;54&#34;, &#34;line1&#34;: &#34;Rheinstraße&#34;, &#34;line2&#34;: &#34;Worms&#34;, &#34;postcode&#34;: &#34;67547&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 18, &#34;name&#34;: &#34;Mojitto Burger&#34;, &#34;restaurant&#34;: &#34;Burger King India&#34;, &#34;web&#34;: &#34;www.mojitto.com&#34;, &#34;description&#34;: &#34;Burger a day keeps the fat away&#34;, &#34;ingredients&#34;: [ &#34;bread&#34;, &#34;maida&#34;, &#34;chick&#34;, &#34;patty&#34; ], &#34;addresses&#34;: [ { &#34;addressID&#34;: 0, &#34;number&#34;: &#34;8A&#34;, &#34;line1&#34;: &#34;Kaythye millath street&#34;, &#34;postcode&#34;: &#34;620020&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 19, &#34;name&#34;: &#34;Double Slab Burger&#34;, &#34;restaurant&#34;: &#34;Slab Burgers&#34;, &#34;web&#34;: &#34;www.slabburgers.com&#34;, &#34;description&#34;: &#34;taste of hormone-free running cows&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;caramelized onions&#34;, &#34;slab sauce&#34;, &#34;pickles&#34;, &#34;mushrooms&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Charles Street West&#34;, &#34;line2&#34;: &#34;Toronto, Ontario&#34;, &#34;postcode&#34;: &#34;M4Y 2R4&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 20, &#34;name&#34;: &#34;Du Brown&#34;, &#34;restaurant&#34;: &#34;Du Brown Burger Café&#34;, &#34;web&#34;: &#34;https://www.dubrown.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;bacon&#34;, &#34;caramelized onions&#34;, &#34;cheddar cheese&#34;, &#34;barbecue sauce&#34;, &#34;onion rings&#34;, &#34;jalepeños&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;chipote mayonaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;rue St Léonard&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 21, &#34;name&#34;: &#34;Melting Potes&#34;, &#34;restaurant&#34;: &#34;Melting Potes Nantes&#34;, &#34;web&#34;: &#34;https://www.meltingpotesnantes.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;boulevard de la Prairie au Duc&#34;, &#34;line2&#34;: &#34;Ile de Nantes, Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 22, &#34;name&#34;: &#34;Big Fernand&#34;, &#34;restaurant&#34;: &#34;Big Fernand&#34;, &#34;web&#34;: &#34;https://bigfernand.com/&#34;, &#34;description&#34;: &#34;L&#39;atelier du Hamburgé - The burger workshop&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;sundried tomates&#34;, &#34;tatar sauce&#34;, &#34;confit onions&#34;, &#34;blue cheese&#34;, &#34;smokey bacon&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue des Halles&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;3&#34;, &#34;line1&#34;: &#34;Place de Béthune&#34;, &#34;line2&#34;: &#34;Lille&#34;, &#34;postcode&#34;: &#34;59000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;6&#34;, &#34;line1&#34;: &#34;place Jean Jaurès&#34;, &#34;line2&#34;: &#34;Montpellier&#34;, &#34;postcode&#34;: &#34;34000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;86&#34;, &#34;line1&#34;: &#34;Boulevard du Montparnasse&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75014&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;55&#34;, &#34;line1&#34;: &#34;rue de Faubourg Poissonnière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;4&#34;, &#34;line1&#34;: &#34;rue du Parchemin&#34;, &#34;line2&#34;: &#34;Strasbourg&#34;, &#34;postcode&#34;: &#34;67000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 23, &#34;name&#34;: &#34;PNY Burger&#34;, &#34;restaurant&#34;: &#34;PNY Burger&#34;, &#34;web&#34;: &#34;https://pnyburger.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;50&#34;, &#34;line1&#34;: &#34;rue de Cautartin&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;120&#34;, &#34;line1&#34;: &#34;rue du Faubourg St Antoine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75012&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;rue Perrée&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75003&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;96&#34;, &#34;line1&#34;: &#34;rue Oberkampf&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75011&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;24&#34;, &#34;line1&#34;: &#34;rue Pierre Fontaine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 24, &#34;name&#34;: &#34;231 East&#34;, &#34;restaurant&#34;: &#34;231 East Street&#34;, &#34;web&#34;: &#34;https://www.231-east.fr/&#34;, &#34;description&#34;: &#34;True New York style burger in France&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;smoked bacon&#34;, &#34;chicken&#34;, &#34;veggie burgers&#34;, &#34;brioche bun&#34;, &#34;honey mustard sauce&#34;, &#34;onion chutney&#34;, &#34;pepper sauce&#34;, &#34;avacado&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue de la Couronne&#34;, &#34;line2&#34;: &#34;Aix-en-Provence&#34;, &#34;postcode&#34;: &#34;13100&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;9&#34;, &#34;line1&#34;: &#34;faubourg Sainte-Claire&#34;, &#34;line2&#34;: &#34;Annecy&#34;, &#34;postcode&#34;: &#34;7400&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;10&#34;, &#34;line1&#34;: &#34;Grande rue&#34;, &#34;line2&#34;: &#34;Grenoble&#34;, &#34;postcode&#34;: &#34;38000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;2&#34;, &#34;line1&#34;: &#34;rue de la Pépinière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75008&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;&#34;, &#34;line1&#34;: &#34;boulevard Géneral de Gaulle&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 25, &#34;name&#34;: &#34;Cajun Black Bean Burger&#34;, &#34;restaurant&#34;: &#34;The Chicago Diner&#34;, &#34;web&#34;: &#34;www.veggiediner.com&#34;, &#34;description&#34;: &#34;a hearty veggie burger with a kick that goes great with sweet potato fries&#34;, &#34;ingredients&#34;: [ &#34;spicy black bean veggie patty&#34;, &#34;sautéed onions&#34;, &#34;mushrooms&#34;, &#34;spinach&#34;, &#34;tomato&#34;, &#34;fried jalapeño&#34;, &#34;cheddar sauce&#34;, &#34;creole mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;3411&#34;, &#34;line1&#34;: &#34;N Halsted St&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60657&#34;, &#34;country&#34;: &#34;USA&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;2333&#34;, &#34;line1&#34;: &#34;N Milwaukee Ave&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60647&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 26, &#34;name&#34;: &#34;Hatch Green Chile Bacon Burger&#34;, &#34;restaurant&#34;: &#34;Whataburger&#34;, &#34;web&#34;: &#34;www.whataburger.com&#34;, &#34;description&#34;: &#34;burger with hatch green chiles, bacon and cheese&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheese&#34;, &#34;bacon&#34;, &#34;hatch green chiles&#34;, &#34;mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;984&#34;, &#34;line1&#34;: &#34;388 E Stacy Rd&#34;, &#34;line2&#34;: &#34;Allen, TX&#34;, &#34;postcode&#34;: &#34;75002&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 27, &#34;name&#34;: &#34;The Street Burgers and Coctail Bar Prague 1&#34;, &#34;restaurant&#34;: &#34;The Street&#34;, &#34;web&#34;: &#34;www.thestreet.cz&#34;, &#34;description&#34;: &#34;American, Bar, International, European, Vegetarian Friendly&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheddar cheese&#34;, &#34;blue cheese&#34;, &#34;onion&#34;, &#34;mozzarella&#34;, &#34;bacon&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;11&#34;, &#34;line1&#34;: &#34;Konviktska&#34;, &#34;line2&#34;: &#34;Prague&#34;, &#34;postcode&#34;: &#34;110 00&#34;, &#34;country&#34;: &#34;The Czech Republic&#34; } ] } ] . The benefits of using an api are that we are able to use and pull from a large library of data that other people update. It also allows communication over the internet where we can pull from the internet and not have to bring the library onto our computer | Backend development allows faster development speed | .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/pbl/2022/10/01/api-notebook.html",
            "relUrl": "/fastpages/pbl/2022/10/01/api-notebook.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Images Notebook",
            "content": "Png to gif . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image scaling, ascii conversion, color change . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i += 2) { //make it iterate less heightwise so its not as stretched vertically for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } static void ColorScale(String fileN, int xx, int yy, int zz) { //parameters to do multiple color scales with this method BufferedImage img = null; File f = null; try{ f = new File(&quot;images/MonaLisa.png&quot;); //read image img = ImageIO.read(f); }catch(IOException e){ System.out.println(e); } int width = img.getWidth(); //get image dimensions in pixels int height = img.getHeight(); for(int y = 0; y &lt; height; y++){ //itterates through each pixel for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y); //get pixel value int a = (p&gt;&gt;24)&amp;0xff; //get alpha values int r = (p&gt;&gt;16)&amp;0xff; //get rgb values int g = (p&gt;&gt;8)&amp;0xff; int b = p&amp;0xff; int avg = (r+g+b)/3; //averages rgb values p = (a&lt;&lt;xx) | (avg&lt;&lt;yy) | (avg&lt;&lt;zz) | avg; // find new pixel value img.setRGB(x, y, p); //set new pixel value at each x and y } } try{ f = new File(fileN); //makes new image ImageIO.write(img, &quot;png&quot;, f); System.out.println(&quot;Success&quot;); } catch(IOException e){ System.out.println(e); } } static void BlueScale() { BufferedImage img = null; File f = null; try{ //getting the image f = new File(&quot;images/MonaLisa.png&quot;); img = ImageIO.read(f); }catch(IOException e){ System.out.println(e); } int width = img.getWidth(); //getting width and height of image in pixels int height = img.getHeight(); for(int y = 0; y &lt; height; y++){ //iterates for every pixel in the picture for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y);// pixel value int a = (p&gt;&gt;24)&amp;0xff; // alpha value int r = (p&gt;&gt;16)&amp;0xff; // red value int g = (p&gt;&gt;8)&amp;0xff; // green value int b = p&amp;0xff; // blue value int avg = (r+g+b)/3; //averages the rgb values p = (a&lt;&lt;24) | (0&lt;&lt;16) | (g&lt;&lt;8) | b; img.setRGB(x, y, p); //color scales } } try{ f = new File(&quot;images/BlueScaleMonaLisa.png&quot;); //makes new image ImageIO.write(img, &quot;png&quot;, f); System.out.println(&quot;Success&quot;); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 220) { str = &quot;.&quot;; } else if (g &gt;= 210) { str = &quot;:&quot;; } else if (g &gt;= 200) { str = &quot;~&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 155) { str = &quot;r&quot;; } else if (g &gt;= 140) { str = &quot;/&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 95) { str = &quot;N&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;W&quot;; } else if (g &gt;= 40) { str = &quot;B&quot;; } else if (g &gt;= 20) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); System.out.println(&quot;Green Scale:&quot;); ColorScale(&quot;images/GreenScaleMonaLisa.png&quot;, 8,16,24); //parameters that include the directory of file and rgb values to scale with System.out.println(&quot;Red Scale:&quot;); ColorScale(&quot;images/RedScaleMonaLisa.png&quot;, 16,24,8); System.out.println(&quot;Grey Scale:&quot;); ColorScale(&quot;images/GreyScaleMonaLisa.png&quot;, 24,8,16); System.out.println(&quot;Blue Scale:&quot;); BlueScale(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png Green Scale: Success Red Scale: Success Grey Scale: Success Blue Scale: Success . . . . . . .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/09/25/arrays-images.html",
            "relUrl": "/fastpages/cb/2022/09/25/arrays-images.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Javascript test",
            "content": "Document . Name Surname Name | Surname |",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/09/24/test.html",
            "relUrl": "/markdown/2022/09/24/test.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Javascript HTML",
            "content": "Document . Full Name Period Score Name | Period | Score |",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/09/24/js-html-post.html",
            "relUrl": "/markdown/2022/09/24/js-html-post.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fibonacci Notebook",
            "content": "Basic Fibonacci Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(8); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . hacks without reproducing same lines of code . While Loop . public class WhileLoop extends Fibo { public WhileLoop() { this(8); //iterates 8 times } public WhileLoop(int nth) { //makes arrays, establishes nth term this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { //while loop making this.name = &quot;While&quot;; int num = 0; long[] w = new long[]{0, 1}; while(this.size &gt;= num) { // while it has iterated less than or equal to 8 times, it iterates again this.setData(w[0]); w = new long[]{w[1], w[0] + w[1]}; // add terms to array num++; } } static public void main(String[] args) { //prints it WhileLoop whileprint = new WhileLoop(); whileprint.print(); } } WhileLoop.main(null) . Init method = While fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . Recursion . public class Recursion extends Fibo { public Recursion() { //iterates 8 times this(8); } public Recursion(int nth) { //makes arrays, establishes nth term this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void recur(long[] r, int i) { //starts at first term and adds a new term, keeps doing this over and over again if it iterated less than 8 times this.setData(r[0]); r = new long[]{r[1], r[0] + r[1]}; i++; if (i &lt;= this.size) { this.recur(r, i); } } protected void init() { // starts at 0, repeats this.name = &quot;Recursion&quot;; int i = 0; long[] r = new long[] {0,1}; this.recur(r, i); } static public void main(String[] args) { //prints Recursion recursionprint = new Recursion(); recursionprint.print(); } } Recursion.main(null) . Init method = Recursion fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . For Loop . public class ForLoop extends Fibo{ public ForLoop() { //iterates 8 times this(8); } public ForLoop(int nth) { //makes arrays, establishes nth term this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { this.name = &quot;For Loop&quot;; long[] f = new long[]{0, 1}; for(int num = 0; num &lt;= this.size; num++) { //uses for loop to iterate up to 8 times, adding a term each time this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { //prints ForLoop forprint = new ForLoop(); forprint.print(); } } ForLoop.main(null) . Init method = For Loop fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . 1B . The loops that we learned in these can all be used in our CB frqs. The while loop, for loop, and recursion are all useful 4C | All the types of iteration all have the same output. They are all doing the same thing just in a different way, which could change how long each one takes, but not the output. 5A | Recursion uses if-else, while loops use while, and for loops use for. | .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/20/fibonacci-notebook.html",
            "relUrl": "/cb/jupyter/2022/09/20/fibonacci-notebook.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "FRQ 1 Notebook",
            "content": "2016 FRQ question #1 . a. Write the entire RandomStringChooser class. Your implementation must include an appropriate constructor and any necessary methods. Any instance variables must be private. The code segment in the example above should have the indicated behavior (that is, it must compile and produce a result like the possible output shown). Neither the constructor nor any of the methods should alter the parameter passed to the constructor, but your implementation may copy the contents of the array. . public class RandomStringChooser { //makes class public RandomStringChooser(String str) { //creates class constructor for RandomStringChooser class ArrayList&lt;String&gt; stringArray = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; z = new ArrayList&lt;String&gt;(); } public static void getNext(String[] args) { //getNext method for (int l = 0; l &lt; 3; l++) { //running 3 times to show that it is random each time z.clear(); stringArray.add(&quot;chicken&quot;); //adding a couple inputs to the initial list stringArray.add(&quot;cow&quot;); stringArray.add(&quot;pig&quot;); int num = stringArray.size(); for (int i = 0; i &lt; 4; i++) { //for loop that iterates 4 times, which is one more than the amount of elements in the initial array int b = stringArray.size(); // sets b to the number of elements in the initial array int random = (int)(Math.random() * stringArray.size()); //randomizes a number if (b &gt; 0) { //if the amount of elements in the initial array is greater than 0, first add the chosen element to a new array and then delete that element from the original array z.add(stringArray.get(random)); stringArray.remove(random); } else { // if the amount of elements in the initial array is 0, then it adds none to the new array z.add(&quot;None&quot;); } } System.out.print(z + &quot; &quot;); //prints final array } } } RandomStringChooser.getNext(null); . [chicken, cow, pig, None] [chicken, pig, cow, None] [cow, chicken, pig, None] . b. Complete the RandomLetterChooser constructor below. /** Constructs a random letter chooser using the given string str. . Precondition: str contains only letters. */ public RandomLetterChooser(String str) | . public RandomLetterChooser(String str) //finish constructor and calls the superclass method getSingleLetters { super(getSingleLetters(str)); } .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/18/frq1.html",
            "relUrl": "/cb/jupyter/2022/09/18/frq1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Iteration Notebook",
            "content": "iteration . This is more of an imperative programming style, as the cars aren&#39;t objects. They don&#39;t have attributes. | to access a 2D array, you can print out the stuff by a single dimension, ie: printing out rows and columns seperately | . class Main { // The area between class definition and the 1st method is where we keep data for object in Java String [][] cars; public Main() { //Storing Data in 2D arrays cars = new String[][]{ //car 0 { &quot; ______ vroom &quot;, //[0][0] &quot; /[_][_|`.__ &quot;, &quot; ( _ _ _| &quot;, &quot; =`-(_)--(_)- &quot;, &quot;===============================&quot; }, //car 1 { &quot; -_- _/|______||__ mmmmm &quot;, &quot; -_-__ / ,-. -|- ,-.`-. &quot;, &quot; _-_- `( o )-( o )-&#39; &quot;, &quot; `-&#39; `-&#39; &quot;, &quot;===============================&quot; }, //car 2 { &quot; ____ vroom vroom &quot;, &quot; __/ |_|_ &quot;, &quot; | _ _``-. &quot;, &quot; &#39;-(_)(_)--&#39; &quot;, &quot;===========================&quot; }, //car 3 { &quot; __ car &quot;, &quot; _.-.___|__ &quot;, &quot; | _ _`-. &quot;, &quot; &#39;-(_)-(_)--` &quot;, &quot;===============================&quot; }, }; } public void printPoem() { //starts poem System.out.println(); System.out.println(&quot;Car crash poem&quot;); System.out.println(&quot;&quot;); // carCount is the number of elements in the carcount array int carCount = cars.length; for (int i = carCount; i &gt;= 1; i--) //loop through array, decreasing the amount of cars by one each time it loops { System.out.println(i + &quot; car(s) driving on the road...&quot;); int bz = cars[0].length; for (int row = 0; row &lt; bz; row++) { //cycles through &quot;cells&quot; of 2d array //prints column for (int col = 0; col &lt; carCount; col++) { System.out.print(cars[col][row] + &quot;&quot;); } System.out.println(); } // decrease car count by 1 System.out.println(&quot;One car crashed and skidded off the road.&quot;); carCount -= 1; } System.out.println(&quot;No more cars driving on the road&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new Main().printPoem(); //a new ghost list and output in one step } } Main.main(null); . Car crash poem 4 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm ____ vroom vroom __ car /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. __/ |_|_ _.-.___|__ ( _ _ _| _-_- `( o )-( o )-&#39; | _ _``-. | _ _`-. =`-(_)--(_)- `-&#39; `-&#39; &#39;-(_)(_)--&#39; &#39;-(_)-(_)--` ======================================================================================================================== One car crashed and skidded off the road. 3 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm ____ vroom vroom /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. __/ |_|_ ( _ _ _| _-_- `( o )-( o )-&#39; | _ _``-. =`-(_)--(_)- `-&#39; `-&#39; &#39;-(_)(_)--&#39; ========================================================================================= One car crashed and skidded off the road. 2 car(s) driving on the road... ______ vroom -_- _/|______||__ mmmmm /[_][_|`.__ -_-__ / ,-. -|- ,-.`-. ( _ _ _| _-_- `( o )-( o )-&#39; =`-(_)--(_)- `-&#39; `-&#39; ============================================================== One car crashed and skidded off the road. 1 car(s) driving on the road... ______ vroom /[_][_|`.__ ( _ _ _| =`-(_)--(_)- =============================== One car crashed and skidded off the road. No more cars driving on the road THE END .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/12/AP-iteration.html",
            "relUrl": "/cb/jupyter/2022/09/12/AP-iteration.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Focus and Habits",
            "content": "Video . taking control of life is very difficult and takes a lot of things to do | do happy things that people may not be used to doing, which helps us, requires a lot of effort | to gain happiness, have to make a habit out of it, things like exercise are important | need to put things in practice, can&#39;t just think about it | the gi joe fallacy, knowing is only half the battle, just knowing isn&#39;t enough, need to actively do it | have to recognize that your mind is lying to you about what makes you happy sometimes | . Personal . I&#39;m quite interested in stuff in either the computer science field or the biomed field and have been working at both to get further in them. After watching some of this video, I&#39;ve realized that I can&#39;t just keep putting off doing stuff and that I need to actively try to get myself to do something. So, I want to try and push myself to try and do things that I may not be comfortable with and I believe that in the long run, I will look back on those moments and be happier because they happened. .",
            "url": "https://samuelwaang.github.io/samuel/jupyter/personal/2022/09/10/focus-habit.html",
            "relUrl": "/jupyter/personal/2022/09/10/focus-habit.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Boolean Notebook",
            "content": "ifs . if: If the condition in the if statement is true, then the code is executed under it is executed. | if-else: If the condition in the if statement is true, then that code under that is executed. Otherwise (if false), then the code under else is executed. | if-elseif-else: There are 2 conditions to be met in this, with the first if&#39;s code being executed if that is true. The elseif&#39;s code will be executed if the statement for that is true. If it&#39;s false for both if and ifelse statements, then the else&#39;s code will be executed. | . import java.util.Scanner; Scanner input; System.out.print(&quot;What color are apples?: &quot;); input = new Scanner(System.in); String answer = input.nextLine(); answer = answer.toLowerCase(); System.out.println(answer); if ((answer == &quot;yellow&quot;) || (answer == &quot;red&quot;) || (answer == &quot;green&quot;)){ // will print correct if the user answers yellow, red, or green System.out.print(&quot;You are correct&quot;); } else {// if the user inputs anything other than yellow, red, green, then it outputs this System.out.print(&quot;What kind of apples are have you been looking at?&quot;); } System.out.println(&quot; &quot;); System.out.print(&quot;On a scale of 1-10, how do you rate apples?: &quot;); input = new Scanner(System.in); Double answer1 = input.nextDouble(); System.out.println(answer1); if ((answer1 &lt; 5) &amp;&amp; (answer1 &gt; 0)) { // if the user inputs a number between 1 and 4, then it prints this System.out.print(&quot;What is wrong with you.&quot;); } else if ((answer1 &lt; 8) &amp;&amp; (answer1 &gt;= 5)) { //if the user inputs a number between 5 and 7 it inputs this System.out.print(&quot;That makes sense.&quot;); } else if ((answer1 &lt;= 10) &amp;&amp; (answer1 &gt;= 8)) { // if the user inputs a number between 8 and 10 it inputs this System.out.print(&quot;Very correct!&quot;); } else { // if the user doesn&#39;t input a number from 1 to 10 it inputs this System.out.print(&quot;Your choice has to be a number between 1 and 10.&quot;); } . What color are apples?: blue What kind of apples are have you been looking at? On a scale of 1-10, how do you rate apples?: 5.0 That makes sense. . import java.util.Scanner; public class GradeCalculator { public static void main(String args[]) { Scanner input = new Scanner(System.in); System.out.println(&quot;Seperate category?: &quot;) boolean category = input.nextBoolean(); if (category == true) { System.out.println(&quot;current grade?: &quot;) double a = input.nextDouble(); System.out.println(&quot;% final: &quot;) double perc1 = input.nextDouble(); System.out.println(&quot;desired grade: &quot;) double b input.nextDouble(); double cgrade = a/100 * (100-perc1)/100; double bgrade = b/100-cgrade; double perc2 = bgrade/perc1; System.out.println(&quot;needed grade: &quot; + perc2); } } } . 0.546 . Switch case . switch is used to select one of the code blocks | switch makes it little easier to understand and a little less cluttered | the value inputted will be compared with the values of each case and if it matches, then that will executed | . import java.util.Scanner; System.out.print(&quot;How old are you?: &quot;); Scanner num = new Scanner(System.in); int answer = Integer.parseInt(num.nextLine());; // scanner input System.out.println(answer); // to do age ranges, each case number had to be defined by a range in switch switch ((0 &lt;= answer &amp;&amp; answer &lt;=1) ? 0 : // &quot;?&quot; is if and &quot;:&quot; is else, so in this case if the number inputted was between 0 and 1, then it would be set as case 0, if not then it would go on to the other cases (2 &lt;= answer &amp;&amp; answer &lt;=4) ? 1 : (5 &lt;= answer &amp;&amp; answer &lt;=12) ? 2 : (13 &lt;= answer &amp;&amp; answer &lt;=19) ? 3 : (20 &lt;= answer &amp;&amp; answer &lt;=39) ? 4 : (40 &lt;= answer &amp;&amp; answer &lt;=59) ? 5 : (60 &lt;= answer &amp;&amp; answer &lt;=130) ? 6 : 7) { case 0: System.out.println(&quot;You&#39;re a baby.&quot;); // if between age 0 and 1, then it prints you&#39;re a baby break; case 1: System.out.println(&quot;You&#39;re a toddler.&quot;); break; case 2: System.out.println(&quot;You&#39;re a child.&quot;); break; case 3: System.out.println(&quot;You&#39;re a teen.&quot;); break; case 4: System.out.println(&quot;You&#39;re a adult.&quot;); break; case 5: System.out.println(&quot;You&#39;re a middle-aged adult.&quot;); break; case 6: System.out.println(&quot;You&#39;re old.&quot;); break; case 7: System.out.println(&quot;How? I think you made a mistake.&quot;); //if not in the range of any of the previous cases break; default: System.out.println(&quot;Try again.&quot;); //if user input bypasses all cases break; } . How old are you?: . java.lang.NumberFormatException: For input string: &#34;&#34; at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.base/java.lang.Integer.parseInt(Integer.java:662) at java.base/java.lang.Integer.parseInt(Integer.java:770) at .(#18:1) . import java.util.Scanner; public class GradeCalculator { public static void main(String args[]) { Scanner input = new Scanner(System.in); System.out.println(&quot;Seperate category?: &quot;) boolean category = input.nextBoolean(); if (category == true) { System.out.println(&quot;current grade?: &quot;) double a = input.nextDouble(); System.out.println(&quot;% final: &quot;) double perc1 = input.nextDouble(); System.out.println(&quot;desired grade: &quot;) double b input.nextDouble(); double cgrade = a/100 * (100-perc1)/100; double bgrade = b/100-cgrade; double perc2 = bgrade/perc1; System.out.println(&quot;needed grade: &quot; + perc2); } } } . De Morgan&#39;s Law . negate an and statement | negate an or statement | uses ! operator (not) | . import java.util.Scanner; public class GradeCalculator { public static void main(String args[]) { Scanner input = new Scanner(System.in); System.out.println(&quot;Seperate category?: &quot;); boolean category = input.nextBoolean(); if (category == true) { System.out.println(&quot;current grade?: &quot;); double a = input.nextDouble(); System.out.println(&quot;% final: &quot;); double perc1 = input.nextDouble(); System.out.println(&quot;desired grade: &quot;); double b = input.nextDouble(); double cgrade = a/100 * (100-perc1)/100; double bgrade = b/100-cgrade; double perc2 = bgrade/perc1; System.out.println(&quot;needed grade: &quot; + perc2*10000 + &quot;%&quot;); } else { System.out.println(&quot;current grade?: &quot;); double a = input.nextDouble(); System.out.println(&quot;desired grade: &quot;); double b = input.nextDouble(); System.out.println(&quot;test category %: &quot;); double c = input.nextDouble(); System.out.println(&quot;points in test category: &quot;); double d = input.nextDouble(); System.out.println(&quot;points in the final: &quot;); double e = input.nextDouble(); a = a/100; b = b/100; double total = (e/(d+e))*c; //final is this percent of the total grade double needed = (e*(b-a))/total; System.out.println(&quot;points needed: &quot; + needed * 10000); } } } GradeCalculator.main(null); . Seperate category?: current grade?: % final: desired grade: needed grade: 113.33333333333333% . Scanner input = new Scanner(System.in); /*/ System.out.println(&quot;current grade?: &quot;); double a = input.nextDouble(); System.out.println(&quot;desired grade: &quot;); double b = input.nextDouble(); System.out.println(&quot;test category %: &quot;); double c = input.nextDouble(); System.out.println(&quot;current grade in test category: &quot;); double curr = input.nextDouble(); System.out.println(&quot;points in test category: &quot;); double d = input.nextDouble(); System.out.println(&quot;points in the final: &quot;); double e = input.nextDouble(); /*/ double a = 89; System.out.println(&quot;desired grade: &quot;); double b = 90; System.out.println(&quot;test category %: &quot;); double c = 80; System.out.println(&quot;current grade in test category: &quot;); double curr = 90; System.out.println(&quot;points in test category: &quot;); double d = 100; System.out.println(&quot;points in the final: &quot;); double e = 100; double other = a - (c * curr/100); //other category percent System.out.println(other); double needed = b - other; System.out.println(needed); double rneeded = needed/c; //needed in test category System.out.println(rneeded); // double current = ((fin + d)/(d + e))*100 = rneeded double fin = ((rneeded)*(d+e))/100-d/100; System.out.print(fin); . desired grade: test category %: current grade in test category: points in test category: points in the final: 17.0 73.0 0.9125 0.825 .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/10/booleans.html",
            "relUrl": "/cb/jupyter/2022/09/10/booleans.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Code.org Notebook",
            "content": ". Code.org notes . class, instantiate object, while loop . public class MyNeighborhood { //makes a class that is public, allows it to be accessed by any class public static void main(String[] args) { //starts the running of a java program Painter PainterPlus = new Painter(); // Instantiates an object (Painter) for class PainterPlus. while (myPainterPlus.isOnBucket()) { //while loop that takes paint from a bucket over and over again, as long as the painter is on the bucket myPainterPlus.takePaint(); } } } . extends, super(), make method . public class PainterPlus extends Painter { //&quot;extends&quot; extends a class, so in this case it extends Painter public PainterPlus() { super(); // super is reference variable to parent class, used to access variable, method, constructor, in base class from derived class } public void turnRight() { //making method turnRight turnLeft(); turnLeft(); turnLeft(); } public void moveOrTakePaint() { // if else method if (canMove()) { move(); } else { while (isOnBucket()) { takePaint(); } } } } . some notes . algorithm: instructions to complete task | method signature: has name and parameter list | ! operator: returns opposite of what is inputted(ie: input of true would output false) | concatenation: join 2 strings together | edge case: bug at highest/lowest end of a range of values | .",
            "url": "https://samuelwaang.github.io/samuel/cb/jupyter/2022/09/04/week2-codeorg.html",
            "relUrl": "/cb/jupyter/2022/09/04/week2-codeorg.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Java Using Objects",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.math.*; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Significant Figures&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } public static void significant(String[] args) { Scanner input; System.out.print(&quot;Enter 1st number: &quot;); input = new Scanner(System.in); String input1 = input.nextLine(); System.out.println(input1); System.out.print(&quot;Enter 2nd number: &quot;); input = new Scanner(System.in); String input2 = input.nextLine(); System.out.println(input2); var y = significantDigits(new BigDecimal(input1)); var z = significantDigits(new BigDecimal(input2)); System.out.print(&quot;The number of significant figures for your first input: &quot;); System.out.println(y); System.out.print(&quot;The number of significant figures for your second input: &quot;); System.out.println(z); if(y &gt; z) { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + z); } else if(z &gt; y) { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + y); } else { System.out.print(&quot;The number of significant figures that would be used if these two numbers were multiplied together would be: &quot; + z); } } private static int significantDigits(BigDecimal input) { input = input.stripTrailingZeros(); return input.scale() &lt; 0 ? input.precision() - input.scale() : input.precision(); // if input.scale is less than 0 (which would be the sig figs after the decimal point), then it subtracts input scale from input precision, which is the number of digits. Other wise it just sticks with input precision. } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;bye&quot;); quit = true; break; case 1: significant(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Choose from these choices - 1 - Significant Figures 0 - Quit - 1: Enter 1st number: 54 Enter 2nd number: 70.001 The number of significant figures for your first input: 2 The number of significant figures for your second input: 5 The number of significant figures that would be used if these two numbers were multiplied together would be: 2 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/08/29/AP-using_java_objects.html",
            "relUrl": "/fastpages/cb/2022/08/29/AP-using_java_objects.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Primitives Notebook",
            "content": "Use of primitives, wrapper class object . import java.util.Scanner; public class ScanPrimitives { public static void main(String[] args) { Scanner input; // enter number input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); //enter a number that can contain decimals input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // enter a true or false input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); boolean firstInputBoolean = input.nextBoolean(); System.out.println(firstInputBoolean); System.out.print(&quot;Enter 2nd boolean: &quot;); boolean secondInputBoolean = input.nextBoolean(); System.out.println(secondInputBoolean); try { if (firstInputBoolean != secondInputBoolean) { // one input was true and one was false System.out.print(&quot;The Or gate is true, as the inputted booleans are different.&quot;); } else { // the inputs were the same System.out.print(&quot;The Or gate is false, as the inputted booleans are the same.&quot;); } } catch (Exception e) { System.out.println(&quot;Not an boolean (needs to be true or false), &quot; + e); } input.close(); System.out.println(&quot;&quot;); // enter a string (basically anything) input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 5 Enter a double: 5.0 Enter a boolean: true Enter 2nd boolean: true The Or gate is false, as the inputted booleans are the same. Enter a String: p . code.org . int divided = 5 / 2; double doubleDivided = 5.0 / 2; System.out.println(&quot;When the integer was divided, instead of 2.5 like the double, the answer turns out to be 2, so it seems like the calculation was truncated.&quot;); System.out.println(&quot;Integer 5 / 2 is &quot; + divided); System.out.println(&quot;Double 5 / 2 is &quot; + doubleDivided); . When the integer was divided, instead of 2.5 like the double, the answer turns out to be 2, so it seems like the calculation was truncated. Integer 5 / 2 is 2 Double 5 / 2 is 2.5 . compounds assignment . import java.util.Scanner; public class main { public static void main(String[] args){ Scanner input; input = new Scanner(System.in); System.out.print(&quot;Enter 1st string: &quot;); String firstInputString = input.nextLine(); System.out.println(firstInputString); System.out.print(&quot;Enter 2nd string: &quot;); String secondInputString = input.nextLine(); System.out.println(secondInputString); try { firstInputString += secondInputString; System.out.println(&quot;The strings combined are: &quot; + firstInputString + &quot;.&quot;); } catch (Exception e) { System.out.println(&quot;Enter a string&quot; + e); } } } main.main(null); . Enter 1st string: hi Enter 2nd string: bye The strings combined are: hi bye. . Pounds to Kilograms . import java.util.Scanner; public class main { public static void main(String[] args){ Scanner input; input = new Scanner(System.in); System.out.println(&quot;Enter a number of pounds: &quot;); try { double inputPounds = input.nextDouble(); var outputPounds = inputPounds; outputPounds = outputPounds * 0.453592; System.out.println(inputPounds + &quot; pounds is &quot; + outputPounds + &quot; kg.&quot;); } catch (Exception e) { System.out.println(&quot;Enter a number&quot; + e); } } } main.main(null); . Enter a number of pounds: 5.0 pounds is 2.26796 kg. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/pbl/2022/08/27/primitives.html",
            "relUrl": "/fastpages/cb/pbl/2022/08/27/primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Capture Information Plan",
            "content": "Capture Information . I can capture information through fastpages. I can do both notes and also comments in code to document the stuff I learned. To be able to find these notes easier later, I can put the word &quot;notes&quot; in the categories section of each fastpages/post as a tag. . PBL vs Collegeboard . For collegeboard, I can put in the categories section of a post/fastpage the word &quot;CB&quot;. For PBL, I could do the same and put &quot;PBL&quot; instead of &quot;CB&quot;. .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/personal/2022/08/27/capture-info.html",
            "relUrl": "/fastpages/personal/2022/08/27/capture-info.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Bash Notebook Installations",
            "content": "Cloning Project . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/samuel # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/Samuelwaang/samuel&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/samuelwaang/vscode exists. Directory /home/samuelwaang/vscode/samuel exists. . Python Versions . python2 --version python3 --version . Python 2.7.18 Python 3.9.12 . Java Versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Kernels . jupyter kernelspec list . Available kernels: bash /home/samuelwaang/.local/share/jupyter/kernels/bash java /home/samuelwaang/.local/share/jupyter/kernels/java javascript /home/samuelwaang/.local/share/jupyter/kernels/javascript python3 /home/samuelwaang/.local/share/jupyter/kernels/python3 . Notes . prints directory . cd $project pwd . /home/samuelwaang/vscode/samuel . folders/files of directory . ls . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word . folders/files of directory, including the hidden ones . list all files in long format . ls -al . total 488 drwxr-xr-x 16 samuelwaang samuelwaang 4096 Aug 26 10:34 . drwxr-xr-x 6 samuelwaang samuelwaang 4096 Aug 23 10:20 .. -rw-r--r-- 1 samuelwaang samuelwaang 420 Aug 20 13:49 .devcontainer.json drwxr-xr-x 8 samuelwaang samuelwaang 4096 Aug 27 17:44 .git -rw-r--r-- 1 samuelwaang samuelwaang 84 Aug 20 13:49 .gitattributes drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 20 13:49 .github -rw-r--r-- 1 samuelwaang samuelwaang 161 Aug 20 13:49 .gitignore -rw-r--r-- 1 samuelwaang samuelwaang 207007 Aug 20 13:49 2022-05-15-07-21-16.png -rw-r--r-- 1 samuelwaang samuelwaang 90979 Aug 20 13:49 2022-05-15-07-24-25.png -rw-r--r-- 1 samuelwaang samuelwaang 81691 Aug 20 13:49 2022-05-15-07-25-15.png -rwxr-xr-x 1 samuelwaang samuelwaang 1304 Aug 20 13:49 Gemfile -rw-r--r-- 1 samuelwaang samuelwaang 11351 Aug 20 13:49 LICENSE -rwxr-xr-x 1 samuelwaang samuelwaang 1422 Aug 20 13:49 Makefile -rwxr-xr-x 1 samuelwaang samuelwaang 3605 Aug 20 13:49 README.md drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _action_files -rw-r--r-- 1 samuelwaang samuelwaang 3606 Aug 26 10:33 _config.yml drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _fastpages_docs drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _includes drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _layouts drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 26 10:37 _notebooks drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 26 10:33 _pages drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _plugins drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 26 10:33 _posts drwxr-xr-x 3 samuelwaang samuelwaang 4096 Aug 20 13:49 _sass drwxr-xr-x 2 samuelwaang samuelwaang 4096 Aug 20 13:49 _word drwxr-xr-x 4 samuelwaang samuelwaang 4096 Aug 20 13:49 assets -rwxr-xr-x 1 samuelwaang samuelwaang 1136 Aug 20 13:49 docker-compose.yml drwxr-xr-x 3 samuelwaang samuelwaang 4096 Aug 26 10:33 images -rw-r--r-- 1 samuelwaang samuelwaang 91 Aug 26 10:33 index.html . lists files in a folder . cd $posts pwd ls -l . /home/samuelwaang/vscode/samuel/_posts total 12 -rwxr-xr-x 1 samuelwaang samuelwaang 1966 Aug 20 13:49 2020-01-14-test-markdown-post.md -rw-r--r-- 1 samuelwaang samuelwaang 181 Aug 26 10:33 2022-08-19-random-post.md -rw-r--r-- 1 samuelwaang samuelwaang 720 Aug 20 13:49 README.md . prints what&#39;s in the file . cat README.md . ⚠️ Do not delete this directory! You can delete the blog post files in this directory, but you should still keep this directory around as Jekyll expects this folder to exist. # Auto-convert markdown files To Posts [`fastpages`](https://github.com/fastai/fastpages) will automatically convert markdown files saved into this directory as blog posts! You must save your notebook with the naming convention `YYYY-MM-DD-*.md`. Examples of valid filenames are: shell 2020-01-28-My-First-Post.md 2012-09-12-how-to-write-a-blog.md # Resources - [Jekyll posts](https://jekyllrb.com/docs/posts/) - [Example markdown post](https://github.com/fastai/fastpages/blob/master/_posts/2020-01-14-test-markdown-post.md) . Hack . checks for python modules . test=&quot;python&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hff7bd54_1 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 . Install java kernel if missing . test=&quot;java&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$test is already installed&quot; else wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python install.py echo &quot;$test has been installed&quot; fi . java is already installed . Update Repository . echo &quot;pulling...&quot; git pull . pulling... Already up to date. . echo &quot;committing...&quot; git commit -a -m &quot;New Commit&quot; . committing... [master 50861e6] New Commit 1 file changed, 3 insertions(+), 3 deletions(-) .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/08/25/bash-notebook.html",
            "relUrl": "/fastpages/cb/2022/08/25/bash-notebook.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "random post",
            "content": "hi . I’m samuel .",
            "url": "https://samuelwaang.github.io/samuel/markdown/2022/08/19/random-post.html",
            "relUrl": "/markdown/2022/08/19/random-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Python Notebook",
            "content": "msg = &quot;hi&quot; print(msg) . hi . A simple keypad made with a for loop we made last school year. . matrix = [ [1,2,3],[4,5,6],[7,8,9] ] for num2 in matrix: for num1 in num2: print (num1, end=&quot; &quot;) print() . 1 2 3 4 5 6 7 8 9 .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/08/19/python-notebook.html",
            "relUrl": "/fastpages/cb/2022/08/19/python-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Java Notebook",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hi&quot;); } } HelloStatic.main(null); . Hi .",
            "url": "https://samuelwaang.github.io/samuel/fastpages/cb/2022/08/19/java-notebook.html",
            "relUrl": "/fastpages/cb/2022/08/19/java-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samuelwaang.github.io/samuel/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . By Samuel, a student in CSA. . Samuel, CSA student. &#8617; . |",
          "url": "https://samuelwaang.github.io/samuel/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samuelwaang.github.io/samuel/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}